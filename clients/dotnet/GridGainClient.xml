<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GridGainClient</name>
    </assembly>
    <members>
        <member name="T:GridGain.Client.Balancer.IGridClientLoadBalancer">
            <summary>
            Interface that defines a selection logic of a server node for a particular operation
            (e.g. task run or cache operation in case of pinned mode).</summary>
        </member>
        <member name="M:GridGain.Client.Balancer.IGridClientLoadBalancer.BalancedNode``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Gets next node for executing client command.</summary>
            
            <param name="nodes">Nodes to pick from.</param>
            <returns>Next node to pick.</returns>
            <exception cref="T:GridGain.Client.GridClientServerUnreachableException">
                If none of the nodes given to the balancer can be reached.</exception>
        </member>
        <member name="T:GridGain.Client.Balancer.GridClientRandomBalancer">
             <summary>
             Simple balancer that relies on random node selection from a given collection.</summary>
            
             <remarks>
             This implementation has no caches and treats each given collection as a new one.
             More strictly, for any non-empty collection of size <c>n</c> the probability of selection of any
             node in this collection will be <c>1/n</c>.</remarks>
        </member>
        <member name="F:GridGain.Client.Balancer.GridClientRandomBalancer.rnd">
            <summary>Random for node selection.</summary> 
        </member>
        <member name="M:GridGain.Client.Balancer.GridClientRandomBalancer.BalancedNode``1(System.Collections.Generic.ICollection{``0})">
             <summary>
             Picks up a random node from a collection.</summary>
            
             <param name="nodes">Nodes to pick from.</param>
             <returns>Random node from collection.</returns>
        </member>
        <member name="T:GridGain.Client.Balancer.GridClientRoundRobinBalancer">
            <summary>Simple balancer that implements the round-robin balancing.</summary> 
        </member>
        <member name="T:GridGain.Client.IGridClientTopologyListener">
             <summary>
            Listener interface for notifying on nodes joining or leaving remote grid.
             <para/>
             Since the topology refresh is performed in background, the listeners will
             not be notified immediately after the node leaves grid, but the maximum time
             window between remote grid detects node leaving and client receives topology
             update is <see ctype="GridClientConfiguration#getTopologyRefreshFrequency()"/>.</summary>
        </member>
        <member name="M:GridGain.Client.IGridClientTopologyListener.OnNodeAdded(GridGain.Client.IGridClientNode)">
             <summary>
             Callback for new nodes joining the remote grid.</summary>
            
             <param name="node">New remote node.</param>
        </member>
        <member name="M:GridGain.Client.IGridClientTopologyListener.OnNodeRemoved(GridGain.Client.IGridClientNode)">
             <summary>
             Callback for nodes leaving the remote grid.</summary>
            
             <param name="node">Left node.</param>
        </member>
        <member name="F:GridGain.Client.Balancer.GridClientRoundRobinBalancer.nodeQueue">
            <summary>Nodes to share load.</summary> 
        </member>
        <member name="M:GridGain.Client.Balancer.GridClientRoundRobinBalancer.BalancedNode``1(System.Collections.Generic.ICollection{``0})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Balancer.GridClientRoundRobinBalancer.OnNodeAdded(GridGain.Client.IGridClientNode)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Balancer.GridClientRoundRobinBalancer.OnNodeRemoved(GridGain.Client.IGridClientNode)">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.GridClientAuthenticationException">
            <summary>Exception that represents client authentication failure for some reason.</summary> 
        </member>
        <member name="T:GridGain.Client.GridClientException">
            <summary>Client exception.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientException.#ctor">
            <summary>Constructs an exception.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientException.#ctor(System.String)">
             <summary>
             Creates an exception with given message.</summary>
            
             <param name="msg">Exception message.</param>
        </member>
        <member name="M:GridGain.Client.GridClientException.#ctor(System.String,System.Exception)">
             <summary>
             Creates an exception with given message and error cause.</summary>
            
             <param name="msg">Exception message.</param>
             <param name="cause">Exception cause.</param>
        </member>
        <member name="M:GridGain.Client.GridClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Constructs an exception.</summary>
            
             <param name="info">Serialization info.</param>
             <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:GridGain.Client.GridClientAuthenticationException.#ctor">
            <summary>Constructs an exception.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientAuthenticationException.#ctor(System.String)">
             <summary>
             Creates exception with given message.</summary>
            
             <param name="msg">Error message.</param>
        </member>
        <member name="M:GridGain.Client.GridClientAuthenticationException.#ctor(System.String,System.Exception)">
             <summary>
             Creates exception with given message and cause.</summary>
            
             <param name="msg">Message.</param>
             <param name="cause">Cause.</param>
        </member>
        <member name="M:GridGain.Client.GridClientAuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Constructs an exception.</summary>
            
             <param name="info">Serialization info.</param>
             <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:GridGain.Client.IGridClientNodeMetrics">
            <summary>Node metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.WaitingJobs">
            <summary>Gets waiting jobs metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.ExecutedJobs">
            <summary>Gets active jobs metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.RejectedJobs">
            <summary>Gets rejected jobs metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.CancelledJobs">
            <summary>Gets canceled jobs metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.JobWaitTime">
            <summary>Job wait time metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.JobExecuteTime">
            <summary>Job execute time metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.StartTime">
            <summary>The approximate time when the Java virtual machine started.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.NodeStartTime">
            <summary>
            There can be several grid nodes started in one JVM, so JVM start time will be
            the same for all of them, but node start time will be different.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.UpTime">
            <summary>Uptime of the Java virtual machine.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.LastUpdateTime">
            <summary>Last update time.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.BusyTimeTotal">
            <summary>Total busy time.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.IdleTimeTotal">
            <summary>Total idle time.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.BusyTimePercentage">
            <summary>
            Gets percentage of time this node is busy executing jobs vs. idling.
            <para/>
            Return percentage of time this node is busy (value is less than
            or equal to {@code 1} and greater than or equal to {@code 0})</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.IdleTimePercentage">
            <summary>
            Gets percentage of time this node is idling vs. executing jobs.
            <para/>
            Return percentage of time this node is idle (value is less than
            or equal to {@code 1} and greater than or equal to {@code 0})</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.CpuCount">
            <summary>
            Returns the number of CPUs available to the Java Virtual Machine.
            This method is equivalent to the {@link Runtime#availableProcessors()}
            method.
            <para/>
            Note that this value may change during successive invocations of the
            virtual machine.
            <para/>
            Return the number of processors available to the virtual machine, never smaller than one.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.CpuCurrentLoad">
            <summary>
            Returns the system load average for the last minute.
            The system load average is the sum of the number of runnable entities
            queued to the {@linkplain #getTotalCpus available processors}
            and the number of runnable entities running on the available processors
            averaged over a period of time.
            The way in which the load average is calculated is operating system
            specific but is typically a damped time-dependent average.
            <para/>
            If the load average is not available, a negative value is returned.
            <para/>
            This method is designed to provide a hint about the system load
            and may be queried frequently. The load average may be unavailable on
            some platform where it is expensive to implement this method.
            <para/>
            Return the system load average in <code>[0, 1]</code> range or negative 
            value if not available.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.CpuAverageLoad">
            <summary>
            Average of CPU load value in <code>[0, 1]</code> range 
            over all metrics kept in the history.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.HeapMemoryInitialized">
            <summary>
            Returns the amount of heap memory in bytes that the Java virtual machine
            initially requests from the operating system for memory management.
            This method returns {@code -1} if the initial memory size is undefined.
            <para/>
            Return the initial size of memory in bytes; {@code -1} if undefined.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.HeapMemoryUsed">
            <summary>
            Returns the current heap size that is used for object allocation.
            The heap consists of one or more memory pools. This value is
            the sum of {@code used} heap memory values of all heap memory pools.
            <para/>
            The amount of used memory in the returned is the amount of memory
            occupied by both live objects and garbage objects that have not
            been collected, if any.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return amount of heap memory used.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.HeapMemoryCommitted">
            <summary>
            Returns the amount of heap memory in bytes that is committed for
            the Java virtual machine to use. This amount of memory is
            guaranteed for the Java virtual machine to use.
            The heap consists of one or more memory pools. This value is
            the sum of {@code committed} heap memory values of all heap memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the amount of committed memory in bytes.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.HeapMemoryMaximum">
            <summary>
            Returns the maximum amount of heap memory in bytes that can be
            used for memory management. This method returns {@code -1}
            if the maximum memory size is undefined.
            <para/>
            This amount of memory is not guaranteed to be available
            for memory management if it is greater than the amount of
            committed memory. The Java virtual machine may fail to allocate
            memory even if the amount of used memory does not exceed this
            maximum size.
            <para/>
            This value represents a setting of the heap memory for Java VM and is
            not a sum of all initial heap values for all memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the maximum amount of memory in bytes; {@code -1} if undefined.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.NonHeapMemoryInitialized">
            <summary>
            Returns the amount of non-heap memory in bytes that the Java virtual machine
            initially requests from the operating system for memory management.
            This method returns {@code -1} if the initial memory size is undefined.
            <para/>
            This value represents a setting of non-heap memory for Java VM and is
            not a sum of all initial heap values for all memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the initial size of memory in bytes; {@code -1} if undefined.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.NonHeapMemoryUsed">
            <summary>
            Returns the current non-heap memory size that is used by Java VM.
            The non-heap memory consists of one or more memory pools. This value is
            the sum of {@code used} non-heap memory values of all non-heap memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return amount of none-heap memory used.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.NonHeapMemoryCommitted">
            <summary>
            Returns the amount of non-heap memory in bytes that is committed for
            the Java virtual machine to use. This amount of memory is
            guaranteed for the Java virtual machine to use.
            The non-heap memory consists of one or more memory pools. This value is
            the sum of {@code committed} non-heap memory values of all non-heap memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the amount of committed memory in bytes.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.NonHeapMemoryMaximum">
            <summary>
            Returns the maximum amount of non-heap memory in bytes that can be
            used for memory management. This method returns {@code -1}
            if the maximum memory size is undefined.
            <para/>
            This amount of memory is not guaranteed to be available
            for memory management if it is greater than the amount of
            committed memory.  The Java virtual machine may fail to allocate
            memory even if the amount of used memory does not exceed this
            maximum size.
            <para/>
            This value represents a setting of the non-heap memory for Java VM and is
            not a sum of all initial non-heap values for all memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the maximum amount of memory in bytes; {@code -1} if undefined.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.ThreadCount">
            <summary>The number of live threads including both daemon and non-daemon threads.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.DaemonThreadCount">
            <summary>The number of live daemon threads.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.FileSystemFreeSpace">
            <summary>Number of unallocated bytes in the partition.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.FileSystemTotalSpace">
            <summary>Size of the partition.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.FileSystemUsableSpace">
            <summary>Number of bytes available to this virtual machine on the partition.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNodeMetrics.LastDataVersion">
            <summary>
            Data grid assigns incremental versions to all cache operations. 
            This method provides the latest data version on the node.</summary>
        </member>
        <member name="T:GridGain.Client.GridClientNodeMetricsCounter`2">
            <summary>Counter metrics.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientNodeMetricsCounter`2.#ctor">
            <summary>Constructs mertrics counter.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientNodeMetricsCounter`2.#ctor(`0,`1)">
            <summary>
            Constructs mertrics counter with preset values.</summary> 
            
            <param name="count">Initial value for counter values.</param>
            <param name="average">Initial value for avarage value.</param>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetricsCounter`2.Current">
            <summary>Current metric's value.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetricsCounter`2.Maximum">
            <summary>Maximum metric's value.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetricsCounter`2.Total">
            <summary>Total metric's value.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetricsCounter`2.Average">
            <summary>Average metric's value.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.GridClientDataMetrics">
            <summary>Base implementation for cache metrics.</summary> 
        </member>
        <member name="T:GridGain.Client.IGridClientDataMetrics">
            <summary>Cache metrics used to obtain statistics on cache itself or any of its entries.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataMetrics.CreateTime">
            <summary>Gets create time of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataMetrics.WriteTime">
            <summary>Gets last write time of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataMetrics.ReadTime">
            <summary>Gets last read time of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataMetrics.Reads">
            <summary>Gets total number of reads of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataMetrics.Writes">
            <summary>Gets total number of writes of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataMetrics.Hits">
            <summary>Gets total number of hits for the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataMetrics.Misses">
            <summary>Gets total number of misses for the owning entity (either cache or entry).</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataMetrics.#ctor">
            <summary>Constructs empty cache metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientDataMetrics.CreateTime">
            <summary>Gets create time of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientDataMetrics.WriteTime">
            <summary>Gets last write time of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientDataMetrics.ReadTime">
            <summary>Gets last read time of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientDataMetrics.Reads">
            <summary>Gets total number of reads of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientDataMetrics.Writes">
            <summary>Gets total number of writes of the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientDataMetrics.Hits">
            <summary>Gets total number of hits for the owning entity (either cache or entry).</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientDataMetrics.Misses">
            <summary>Gets total number of misses for the owning entity (either cache or entry).</summary> 
        </member>
        <member name="T:GridGain.Client.GridClientNodeMetrics">
            <summary>Node metrics.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientNodeMetrics.#ctor">
            <summary>Constructs empty node metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.WaitingJobs">
            <summary>Gets waiting jobs metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.ExecutedJobs">
            <summary>Gets active jobs metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.RejectedJobs">
            <summary>Gets rejected jobs metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.CancelledJobs">
            <summary>Gets canceled jobs metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.JobWaitTime">
            <summary>Job wait time metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.JobExecuteTime">
            <summary>Job execute time metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.StartTime">
            <summary>The approximate time when the Java virtual machine started.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.NodeStartTime">
            <summary>
            There can be several grid nodes started in one JVM, so JVM start time will be
            the same for all of them, but node start time will be different.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.UpTime">
            <summary>Uptime of the Java virtual machine.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.LastUpdateTime">
            <summary>Last update time.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.BusyTimeTotal">
            <summary>Total busy time.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.IdleTimeTotal">
            <summary>Total idle time.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.BusyTimePercentage">
            <summary>
            Gets percentage of time this node is busy executing jobs vs. idling.
            <para/>
            Return percentage of time this node is busy (value is less than
            or equal to {@code 1} and greater than or equal to {@code 0})</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.IdleTimePercentage">
            <summary>
            Gets percentage of time this node is idling vs. executing jobs.
            <para/>
            Return percentage of time this node is idle (value is less than
            or equal to {@code 1} and greater than or equal to {@code 0})</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.CpuCount">
            <summary>
            Returns the number of CPUs available to the Java Virtual Machine.
            This method is equivalent to the {@link Runtime#availableProcessors()}
            method.
            <para/>
            Note that this value may change during successive invocations of the
            virtual machine.
            <para/>
            Return the number of processors available to the virtual machine, never smaller than one.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.CpuCurrentLoad">
            <summary>
            Returns the system load average for the last minute.
            The system load average is the sum of the number of runnable entities
            queued to the {@linkplain #getTotalCpus available processors}
            and the number of runnable entities running on the available processors
            averaged over a period of time.
            The way in which the load average is calculated is operating system
            specific but is typically a damped time-dependent average.
            <para/>
            If the load average is not available, a negative value is returned.
            <para/>
            This method is designed to provide a hint about the system load
            and may be queried frequently. The load average may be unavailable on
            some platform where it is expensive to implement this method.
            <para/>
            Return the system load average in <code>[0, 1]</code> range or negative 
            value if not available.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.CpuAverageLoad">
            <summary>
            Average of CPU load value in <code>[0, 1]</code> range 
            over all metrics kept in the history.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.HeapMemoryInitialized">
            <summary>
            Returns the amount of heap memory in bytes that the Java virtual machine
            initially requests from the operating system for memory management.
            This method returns {@code -1} if the initial memory size is undefined.
            <para/>
            Return the initial size of memory in bytes; {@code -1} if undefined.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.HeapMemoryUsed">
            <summary>
            Returns the current heap size that is used for object allocation.
            The heap consists of one or more memory pools. This value is
            the sum of {@code used} heap memory values of all heap memory pools.
            <para/>
            The amount of used memory in the returned is the amount of memory
            occupied by both live objects and garbage objects that have not
            been collected, if any.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return amount of heap memory used.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.HeapMemoryCommitted">
            <summary>
            Returns the amount of heap memory in bytes that is committed for
            the Java virtual machine to use. This amount of memory is
            guaranteed for the Java virtual machine to use.
            The heap consists of one or more memory pools. This value is
            the sum of {@code committed} heap memory values of all heap memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the amount of committed memory in bytes.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.HeapMemoryMaximum">
            <summary>
            Returns the maximum amount of heap memory in bytes that can be
            used for memory management. This method returns {@code -1}
            if the maximum memory size is undefined.
            <para/>
            This amount of memory is not guaranteed to be available
            for memory management if it is greater than the amount of
            committed memory. The Java virtual machine may fail to allocate
            memory even if the amount of used memory does not exceed this
            maximum size.
            <para/>
            This value represents a setting of the heap memory for Java VM and is
            not a sum of all initial heap values for all memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the maximum amount of memory in bytes; {@code -1} if undefined.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.NonHeapMemoryInitialized">
            <summary>
            Returns the amount of non-heap memory in bytes that the Java virtual machine
            initially requests from the operating system for memory management.
            This method returns {@code -1} if the initial memory size is undefined.
            <para/>
            This value represents a setting of non-heap memory for Java VM and is
            not a sum of all initial heap values for all memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the initial size of memory in bytes; {@code -1} if undefined.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.NonHeapMemoryUsed">
            <summary>
            Returns the current non-heap memory size that is used by Java VM.
            The non-heap memory consists of one or more memory pools. This value is
            the sum of {@code used} non-heap memory values of all non-heap memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return amount of none-heap memory used.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.NonHeapMemoryCommitted">
            <summary>
            Returns the amount of non-heap memory in bytes that is committed for
            the Java virtual machine to use. This amount of memory is
            guaranteed for the Java virtual machine to use.
            The non-heap memory consists of one or more memory pools. This value is
            the sum of {@code committed} non-heap memory values of all non-heap memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the amount of committed memory in bytes.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.NonHeapMemoryMaximum">
            <summary>
            Returns the maximum amount of non-heap memory in bytes that can be
            used for memory management. This method returns {@code -1}
            if the maximum memory size is undefined.
            <para/>
            This amount of memory is not guaranteed to be available
            for memory management if it is greater than the amount of
            committed memory.  The Java virtual machine may fail to allocate
            memory even if the amount of used memory does not exceed this
            maximum size.
            <para/>
            This value represents a setting of the non-heap memory for Java VM and is
            not a sum of all initial non-heap values for all memory pools.
            <para/>
            <b>Note:</b> this is <b>not</b> an aggregated metric and it's calculated
            from the time of the node's startup.
            <para/>
            Return the maximum amount of memory in bytes; {@code -1} if undefined.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.ThreadCount">
            <summary>The number of live threads including both daemon and non-daemon threads.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.DaemonThreadCount">
            <summary>The number of live daemon threads.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.FileSystemFreeSpace">
            <summary>Number of unallocated bytes in the partition.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.FileSystemTotalSpace">
            <summary>Size of the partition.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.FileSystemUsableSpace">
            <summary>Number of bytes available to this virtual machine on the partition.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientNodeMetrics.LastDataVersion">
            <summary>
            Data grid assigns incremental versions to all cache operations. 
            This method provides the latest data version on the node.</summary>
        </member>
        <member name="T:GridGain.Client.Util.GridClientArgumentCheck">
            <summary>
            This class encapsulates argument check (null and range) for public facing APIs. Unlike asserts
            it throws "normal" exceptions with standardized messages.</summary>
        </member>
        <member name="M:GridGain.Client.Util.GridClientArgumentCheck.NotNull(System.Object,System.String)">
             <summary>
             Checks if given argument value is not <c>null</c>.
             Otherwise - throws <see ctype="ArgumentException"/>.</summary>
            
             <param name="val">Argument value to check.</param>
             <param name="name">Name of the argument in the code (used in error message).</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientArgumentCheck.NotNull(System.Object,System.String,System.Object,System.String)">
             <summary>
             Checks that none of the given values are <c>null</c>.
             Otherwise - throws <see ctype="ArgumentException"/>.</summary>
            
             <param name="val1">1st argument value to check.</param>
             <param name="name1">Name of the 1st argument in the code (used in error message).</param>
             <param name="val2">2nd argument value to check.</param>
             <param name="name2">Name of the 2nd argument in the code (used in error message).</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientArgumentCheck.NotNull(System.Object,System.String,System.Object,System.String,System.Object,System.String)">
             <summary>
             Checks that none of the given values are <c>null</c>.
             Otherwise - throws <see ctype="ArgumentException"/>.</summary>
            
             <param name="val1">1st argument value to check.</param>
             <param name="name1">Name of the 1st argument in the code (used in error message).</param>
             <param name="val2">2nd argument value to check.</param>
             <param name="name2">Name of the 2nd argument in the code (used in error message).</param>
             <param name="val3">3rd argument value to check.</param>
             <param name="name3">Name of the 3rd argument in the code (used in error message).</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientArgumentCheck.NotNull(System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String)">
             <summary>
             Checks that none of the given values are <c>null</c>.
             Otherwise - throws <see ctype="ArgumentException"/>.</summary>
            
             <param name="val1">1st argument value to check.</param>
             <param name="name1">Name of the 1st argument in the code (used in error message).</param>
             <param name="val2">2nd argument value to check.</param>
             <param name="name2">Name of the 2nd argument in the code (used in error message).</param>
             <param name="val3">3rd argument value to check.</param>
             <param name="name3">Name of the 3rd argument in the code (used in error message).</param>
             <param name="val4">4th argument value to check.</param>
             <param name="name4">Name of the 4th argument in the code (used in error message).</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientArgumentCheck.Ensure(System.Boolean,System.String)">
             <summary>
             Checks if given argument's condition is equal to <c>true</c>.
             Otherwise - throws <see ctype="ArgumentException"/>.</summary>
            
             <param name="cond">Argument's value condition to check.</param>
             <param name="desc">Description of the condition to be used in error message.</param>
        </member>
        <member name="T:GridGain.Client.IGridClient">
            <summary>Grid client API.</summary> 
        </member>
        <member name="M:GridGain.Client.IGridClient.Data">
             <summary>
             Gets a data projection for a default grid cache with <c>null</c> name.</summary>
            
             <returns>Data projection for grid cache with <c>null</c> name.</returns>
             <exception cref="T:GridGain.Client.GridClientException">If client was closed.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClient.Data(System.String)">
             <summary>
             Gets a data projection for grid cache with name <tt>cacheName</tt>. If
             no data configuration with given name was provided at client startup, an
             exception will be thrown.</summary>
            
             <param name="cacheName">Grid cache name for which data projection should be obtained.</param>
             <returns>Data projection for grid cache with name <tt>cacheName</tt>.</returns>
             <exception cref="T:GridGain.Client.GridClientException">If client was closed or no configuration with given name was provided.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClient.Compute">
             <summary>
             Gets a default compute projection. Default compute projection will include all nodes
             in remote grid. Selection of node that will be connected to perform operations will be
             done according to <see ctype="GridClientLoadBalancer"/> provided in client configuration or
             according to affinity if projection call involves affinity key.
             <para/>
             More restricted projection configurations may be created with <see ctype="GridClientCompute"/> methods.</summary>
            
             <returns>Default compute projection.</returns>
            
             @see GridClientCompute
        </member>
        <member name="M:GridGain.Client.IGridClient.AddTopologyListener(GridGain.Client.IGridClientTopologyListener)">
             <summary>
             Adds topology listener. Remote grid topology is refreshed every
             <see ctype="GridClientConfiguration#getTopologyRefreshFrequency()"/> milliseconds. If any node was added or removed,
             a listener will be notified.</summary>
            
             <param name="lsnr">Listener to add.</param>
        </member>
        <member name="M:GridGain.Client.IGridClient.RemoveTopologyListener(GridGain.Client.IGridClientTopologyListener)">
             <summary>
             Removes previously added topology listener.</summary>
            
             <param name="lsnr">Listener to remove.</param>
        </member>
        <member name="M:GridGain.Client.IGridClient.TopologyListeners">
             <summary>
             Gets an unmodifiable snapshot of topology listeners list.</summary>
            
             <returns>List of topology listeners.</returns>
        </member>
        <member name="P:GridGain.Client.IGridClient.Id">
            <summary>
            Gets a unique client identifier. This identifier is generated by factory on client creation
            and used in identification and authentication procedure on server node.</summary>
        </member>
        <member name="T:GridGain.Client.GridClientCacheMode">
            <summary>Cache type on remote node.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientCacheMode.Local">
            <summary>Local cache.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientCacheMode.Replicated">
            <summary>Replicated cache.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientCacheMode.Partitioned">
            <summary>Partitioned cache.</summary> 
        </member>
        <member name="T:GridGain.Client.GridClientClosedException">
            <summary>This exception is thrown whenever a closed client is attempted to be used.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientClosedException.#ctor">
            <summary>Constructs an exception.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientClosedException.#ctor(System.String)">
             <summary>
             Creates exception with given message.</summary>
            
             <param name="msg">Error message.</param>
        </member>
        <member name="M:GridGain.Client.GridClientClosedException.#ctor(System.String,System.Exception)">
             <summary>
             Creates exception with given message and cause.</summary>
            
             <param name="msg">Message.</param>
             <param name="cause">Cause.</param>
        </member>
        <member name="M:GridGain.Client.GridClientClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Constructs an exception.</summary>
            
             <param name="info">Serialization info.</param>
             <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:GridGain.Client.IGridClientCompute">
            <summary>
            A compute projection of grid client. Contains various methods for task execution,
            full and partial (per node) topology refresh and log downloading.</summary>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Projection(GridGain.Client.IGridClientNode)">
             <summary>
             Creates a projection that will communicate only with specified remote node.
             <para/>
             If current projection is dynamic projection, then this method will check is passed node is in topology.
             If any filters were specified in current topology, this method will check if passed node is accepted by
             the filter. If current projection was restricted to any subset of nodes, this method will check if
             passed node is in that subset. If any of the checks fails an exception will be thrown.</summary>
            
             <param name="node">Single node to which this projection will be restricted.</param>
             <returns>Resulting static projection that is bound to a given node.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Projection(System.Predicate{GridGain.Client.IGridClientNode})">
             <summary>
             Creates a projection that will communicate only with nodes that are accepted by the passed filter.
             <para/>
             If current projection is dynamic projection, then filter will be applied to the most relevant
             topology snapshot every time a node to communicate is selected. If current projection is a static projection,
             then resulting projection will only be restricted to nodes that were in parent projection and were
             accepted by the passed filter. If any of the checks fails an exception will be thrown.</summary>
            
             <param name="filter">Filter that will select nodes for projection.</param>
             <returns>Resulting projection (static or dynamic, depending in parent projection type).</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Projection(System.Collections.Generic.ICollection{GridGain.Client.IGridClientNode})">
             <summary>
             Creates a projection that will communicate only with specified remote nodes. For any particular call
             a node to communicate will be selected with balancer of this projection.
             <para/>
             If current projection is dynamic projection, then this method will check is passed nodes are in topology.
             If any filters were specified in current topology, this method will check if passed nodes are accepted by
             the filter. If current projection was restricted to any subset of nodes, this method will check if
             passed nodes are in that subset (i.e. calculate the intersection of two collections).
             If any of the checks fails an exception will be thrown.</summary>
            
             <param name="nodes">Collection of nodes to which this projection will be restricted.</param>
             <returns>Resulting static projection that is bound to a given nodes.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Projection(System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
             <summary>
             Creates a projection that will communicate only with nodes that are accepted by the passed filter. The
             balancer passed will override default balancer specified in configuration.
             <para/>
             If current projection is dynamic projection, then filter will be applied to the most relevant
             topology snapshot every time a node to communicate is selected. If current projection is a static projection,
             then resulting projection will only be restricted to nodes that were in parent projection and were
             accepted by the passed filter. If any of the checks fails an exception will be thrown.</summary>
            
             <param name="filter">Filter that will select nodes for projection.</param>
             <param name="balancer">Balancer that will select balanced node in resulting projection.</param>
             <returns>Resulting projection (static or dynamic, depending in parent projection type).</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Projection(System.Collections.Generic.ICollection{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
             <summary>
             Creates a projection that will communicate only with specified remote nodes. For any particular call
             a node to communicate will be selected with passed balancer..
             <para/>
             If current projection is dynamic projection, then this method will check is passed nodes are in topology.
             If any filters were specified in current topology, this method will check if passed nodes are accepted by
             the filter. If current projection was restricted to any subset of nodes, this method will check if
             passed nodes are in that subset (i.e. calculate the intersection of two collections).
             If any of the checks fails an exception will be thrown.</summary>
            
             <param name="nodes">Collection of nodes to which this projection will be restricted.</param>
             <param name="balancer">Balancer that will select nodes in resulting projection.</param>
             <returns>Resulting static projection that is bound to a given nodes.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Execute``1(System.String,System.Object)">
             <summary>
             Executes task.</summary>
            
             <param name="taskName">Task name or task class name.</param>
             <param name="taskArg">Optional task argument.</param>
             <returns>Task execution result.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.ExecuteAsync``1(System.String,System.Object)">
             <summary>
             Asynchronously executes task.</summary>
            
             <param name="taskName">Task name or task class name.</param>
             <param name="taskArg">Optional task argument.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.AffinityExecute``1(System.String,System.String,System.Object,System.Object)">
             <summary>
             Executes task using cache affinity key for routing. This way the task will start executing
             exactly on the node where this affinity key is cached.</summary>
            
             <param name="taskName">Task name or task class name.</param>
             <param name="cacheName">Name of the cache on which affinity should be calculated.</param>
             <param name="affKey">Affinity key.</param>
             <param name="taskArg">Optional task argument.</param>
             <returns>Task execution result.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.AffinityExecuteAsync``1(System.String,System.String,System.Object,System.Object)">
             <summary>
             Asynchronously executes task using cache affinity key for routing. This way
             the task will start executing exactly on the node where this affinity key is cached.</summary>
            
             <param name="taskName">Task name or task class name.</param>
             <param name="cacheName">Name of the cache on which affinity should be calculated.</param>
             <param name="affKey">Affinity key.</param>
             <param name="taskArg">Optional task argument.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Nodes">
             <summary>
             Gets most recently refreshed topology. If this compute instance is a projection,
             then only nodes that satisfy projection criteria will be returned.</summary>
            
             <returns>Most recently refreshed topology.</returns>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Node(System.Guid)">
             <summary>
             Gets node with given id from most recently refreshed topology.</summary>
            
             <param name="id">Node ID.</param>
             <returns>Node for given ID or <c>null</c> if node with given id was not found.</returns>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Nodes(System.Collections.Generic.ICollection{System.Guid})">
             <summary>
             Gets nodes for the given IDs based on most recently refreshed topology.</summary>
            
             <param name="ids">Node IDs.</param>
             <returns>Collection of nodes for provided IDs.</returns>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Nodes(System.Predicate{GridGain.Client.IGridClientNode})">
             <summary>
             Gets nodes that passes the filter. If this compute instance is a projection, then only
             nodes that passes projection criteria will be passed to the filter.</summary>
            
             <param name="filter">Node filter.</param>
             <returns>Collection of nodes that satisfy provided filter.</returns>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.RefreshNode(System.Guid,System.Boolean,System.Boolean)">
             <summary>
             Gets node by its ID.</summary>
            
             <param name="id">Node ID.</param>
             <param name="includeAttrs">Whether to include node attributes.</param>
             <param name="includeMetrics">Whether to include node metrics.</param>
             <returns>Node descriptor or <c>null</c> if node doesn't exist.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.RefreshNodeAsync(System.Guid,System.Boolean,System.Boolean)">
             <summary>
             Asynchronously gets node by its ID.</summary>
            
             <param name="id">Node ID.</param>
             <param name="includeAttrs">Whether to include node attributes.</param>
             <param name="includeMetrics">Whether to include node metrics.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.RefreshNode(System.String,System.Boolean,System.Boolean)">
             <summary>
             Gets node by IP address.</summary>
            
             <param name="ip">IP address.</param>
             <param name="includeAttrs">Whether to include node attributes.</param>
             <param name="includeMetrics">Whether to include node metrics.</param>
             <returns>Node descriptor or <c>null</c> if node doesn't exist.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.RefreshNodeAsync(System.String,System.Boolean,System.Boolean)">
             <summary>
             Asynchronously gets node by IP address.</summary>
            
             <param name="ip">IP address.</param>
             <param name="includeAttrs">Whether to include node attributes.</param>
             <param name="includeMetrics">Whether to include node metrics.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.RefreshTopology(System.Boolean,System.Boolean)">
             <summary>
             Gets current topology.</summary>
            
             <param name="includeAttrs">Whether to include node attributes.</param>
             <param name="includeMetrics">Whether to include node metrics.</param>
             <returns>Node descriptors.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.RefreshTopologyAsync(System.Boolean,System.Boolean)">
             <summary>
             Asynchronously gets current topology.</summary>
            
             <param name="includeAttrs">Whether to include node attributes.</param>
             <param name="includeMetrics">Whether to include node metrics.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Log(System.Int32,System.Int32)">
             <summary>
             Gets contents of default log file (<c>GRIDGAIN_HOME/work/log/gridgain.log</c>).</summary>
            
             <param name="lineFrom">Index of line from which log is get, inclusive (starting from 0).</param>
             <param name="lineTo">Index of line to which log is get, inclusive (starting from 0).</param>
             <returns>Log contents.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.LogAsync(System.Int32,System.Int32)">
             <summary>
             Asynchronously gets contents of default log file
             (<c>GRIDGAIN_HOME/work/log/gridgain.log</c>).</summary>
            
             <param name="lineFrom">Index of line from which log is get, inclusive (starting from 0).</param>
             <param name="lineTo">Index of line to which log is get, inclusive (starting from 0).</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.Log(System.String,System.Int32,System.Int32)">
             <summary>
             Gets contents of custom log file.</summary>
            
             <param name="path">Log file path. Can be absolute or relative to GRIDGAIN_HOME.</param>
             <param name="lineFrom">Index of line from which log is get, inclusive (starting from 0).</param>
             <param name="lineTo">Index of line to which log is get, inclusive (starting from 0).</param>
             <returns>Log contents.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientCompute.LogAsync(System.String,System.Int32,System.Int32)">
             <summary>
             Asynchronously gets contents of custom log file.</summary>
            
             <param name="path">Log file path. Can be absolute or relative to GRIDGAIN_HOME.</param>
             <param name="lineFrom">Index of line from which log is get, inclusive (starting from 0).</param>
             <param name="lineTo">Index of line to which log is get, inclusive (starting from 0).</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="P:GridGain.Client.IGridClientCompute.Balancer">
             <summary>
             Gets balancer used by projection.</summary>
            
             <returns>Instance of <see ctype="GridClientLoadBalancer"/>.</returns>
        </member>
        <member name="T:GridGain.Client.IGridClientConfiguration">
            <summary>Java client configuration.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.Balancer">
            <summary>
            Default balancer to be used for computational client. It can be overridden
            for different compute instances.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.ConnectionIdleTimeout">
            <summary>Maximum amount of time that client connection can be idle before it is closed.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.ConnectTimeout">
            <summary>Timeout for socket connect operation.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.Credentials">
            <summary>Client credentials to authenticate with.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.DataConfigurations">
            <summary>Collection of data configurations (possibly empty).</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.IsTopologyCacheEnabled">
            <summary>
            Enables client to cache topology internally, so it does not have to
            be always refreshed. Topology cache will be automatically refreshed
            in the background every <see ctype="#getTopologyRefreshFrequency()"/> interval.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.Protocol">
            <summary>Protocol for communication between client and remote grid.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.Servers">
            <summary>
            Collection of <c>'host:port'</c> pairs representing
            remote grid servers used to establish initial connection to
            the grid. Once connection is established, GridGain will get
            a full view on grid topology and will be able to connect to
            any available remote node.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.SslContext">
            <summary>
            SSL context, indicating whether client should try to connect server with secure
            socket layer enabled (regardless of protocol used).
            <para/>
            SSL context is null to disable secure communication.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientConfiguration.TopologyRefreshFrequency">
            <summary>
            Topology refresh frequency. If topology cache is enabled, grid topology
            will be refreshed every <c>topRefreshFreq</c> milliseconds.</summary>
        </member>
        <member name="T:GridGain.Client.GridClientConfiguration">
            <summary>Client configuration adapter.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientConfiguration.DefaultClientProtocol">
            <summary>Default client protocol.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientConfiguration.DefaultTopologyRefreshFrequency">
            <summary>Default topology refresh frequency is 2 sec.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientConfiguration.DefaultConnectionIdleTimeout">
            <summary>Default maximum time connection can be idle.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientConfiguration.#ctor">
            <summary>Creates default configuration.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientConfiguration.#ctor(GridGain.Client.IGridClientConfiguration)">
             <summary>
             Copy constructor.</summary>
            
             <param name="cfg">Configuration to be copied.</param>
        </member>
        <member name="M:GridGain.Client.GridClientConfiguration.DataConfiguration(System.String)">
             <summary>
             Gets data configuration for a cache with specified name.</summary>
            
             <param name="name">Name of grid cache.</param>
             <returns>Configuration or <c>null</c> if there is not configuration for specified name.</returns>
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.Balancer">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.ConnectionIdleTimeout">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.ConnectTimeout">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.Credentials">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.DataConfigurations">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.IsTopologyCacheEnabled">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.Protocol">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.Servers">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.SslContext">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.GridClientConfiguration.TopologyRefreshFrequency">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.IGridClientData">
            <summary>
            A data projection of grid client. Contains various methods for cache operations
            and metrics retrieval.</summary>
        </member>
        <member name="M:GridGain.Client.IGridClientData.PinNodes(GridGain.Client.IGridClientNode,GridGain.Client.IGridClientNode[])">
             <summary>
             Gets client data which will only contact specified remote grid node. By default, remote node
             is determined based on <see ctype="GridClientDataAffinity"/> provided - this method allows
             to override default behavior and use only specified server for all cache operations.
             <para/>
             Use this method when there are other than <c>key-affinity</c> reasons why a certain
             node should be contacted.</summary>
            
             <param name="node">Node to be contacted.</param>
             <param name="nodes">Optional additional nodes.</param>
             <returns>Client data which will only contact server with given node ID.</returns>
             <exception cref="T:GridGain.Client.GridClientException">If resulting projection is empty.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.PinnedNodes">
             <summary>
             Gets pinned node or <c>null</c> if no node was pinned.</summary>
            
             <returns>Pinned node.</returns>
        </member>
        <member name="M:GridGain.Client.IGridClientData.Put``2(``0,``1)">
             <summary>
             Puts value to default cache.</summary>
            
             <param name="key">Key.</param>
             <param name="val">Value.</param>
             <returns>Whether value was actually put to cache.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.PutAsync``2(``0,``1)">
             <summary>
             Asynchronously puts value to default cache.</summary>
            
             <param name="key">key.</param>
             <param name="val">Value.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.PutAll``2(System.Collections.Generic.IDictionary{``0,``1})">
             <summary>
             Puts entries to default cache.</summary>
            
             <param name="entries">Entries.</param>
             <returns><c>True</c> if map contained more then one entry or if put succeeded in case of one entry,</returns>
                  <c>false</c> otherwise
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.PutAllAsync``2(System.Collections.Generic.IDictionary{``0,``1})">
             <summary>
             Asynchronously puts entries to default cache.</summary>
            
             <param name="entries">Entries.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.GetItem``2(``0)">
             <summary>
             Gets value from default cache.</summary>
            
             <param name="key">Key.</param>
             <returns>Value.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.GetAsync``2(``0)">
             <summary>
             Asynchronously gets value from default cache.</summary>
            
             <param name="key">key.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.GetAll``2(System.Collections.Generic.ICollection{``0})">
             <summary>
             Gets entries from default cache.</summary>
            
             <param name="keys">Keys.</param>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
             <returns>Entries.</returns>
        </member>
        <member name="M:GridGain.Client.IGridClientData.GetAllAsync``2(System.Collections.Generic.ICollection{``0})">
             <summary>
             Asynchronously gets entries from default cache.</summary>
            
             <param name="keys">Keys.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.Remove``1(``0)">
             <summary>
             Removes value from default cache.</summary>
            
             <param name="key">Key.</param>
             <returns>Whether value was actually removed.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.RemoveAsync``1(``0)">
             <summary>
             Asynchronously removes value from default cache.</summary>
            
             <param name="key">key.</param>
             <returns>Future, whether entry was actually removed.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.RemoveAll``1(System.Collections.Generic.ICollection{``0})">
             <summary>
             Removes entries from default cache.</summary>
            
             <param name="keys">Keys.</param>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.RemoveAllAsync``1(System.Collections.Generic.ICollection{``0})">
             <summary>
             Asynchronously removes entries from default cache.</summary>
            
             <param name="keys">Keys.</param>
             <returns>Future, whether operation finishes.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.Replace``2(``0,``1)">
             <summary>
             Replaces value in default cache.</summary>
            
             <param name="key">Key.</param>
             <param name="val">Value.</param>
             <returns>Whether value was actually replaced.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.ReplaceAsync``2(``0,``1)">
             <summary>
             Asynchronously replaces value in default cache.</summary>
            
             <param name="key">key.</param>
             <param name="val">Value.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.Cas(System.String,System.String,System.String)">
             <summary>
             Sets entry value to <c>val1</c> if current value is <c>val1</c>.
             <para/>
             If <c>val1</c> is <c>val2</c> and <c>val2</c> is equal to current value,
             entry is removed from cache.
             <para/>
             If <c>val2</c> is <c>val1</c>, entry is created if it doesn't exist.
             <para/>
             If both <c>val1</c> and <c>val1</c> are <c>val1</c>, entry is removed.</summary>
            
             <param name="key">Key.</param>
             <param name="val1">Value to set.</param>
             <param name="val2">Check value.</param>
             <returns>Whether value of entry was changed.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.CasAsync(System.String,System.String,System.String)">
             <summary>
             Asynchronously sets entry value to <c>val1</c> if current value is <c>val1</c>.
             <para/>
             If <c>val1</c> is <c>val2</c> and <c>val2</c> is equal to current value,
             entry is removed from cache.
             <para/>
             If <c>val2</c> is <c>val1</c>, entry is created if it doesn't exist.
             <para/>
             If both <c>val1</c> and <c>null</c> are <c>null</c>, entry is removed.</summary>
            
             <param name="key">Key.</param>
             <param name="val1">Value to set.</param>
             <param name="val2">Check value.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.Affinity``1(``0)">
             <summary>
             Gets affinity node ID for provided key. This method will return <c>null</c> if no
             affinity was configured for the given cache or there are no nodes in topology with
             cache enabled.</summary>
            
             <param name="key">Key.</param>
             <returns>Node ID.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.Metrics">
             <summary>
             Gets metrics for default cache.</summary>
            
             <returns>Cache metrics.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.MetricsAsync">
             <summary>
             Asynchronously gets metrics for default cache.</summary>
            
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.Metrics``1(``0)">
             <summary>
             Gets metrics for entry.</summary>
            
             <param name="key">Key.</param>
             <returns>Entry metrics.</returns>
             <exception cref="T:GridGain.Client.GridClientException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.IGridClientData.MetricsAsync``1(``0)">
             <summary>
             Asynchronously gets metrics for entry.</summary>
            
             <param name="key">Key.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="P:GridGain.Client.IGridClientData.CacheName">
             <summary>
             Gets name of the remote cache.</summary>
            
             <returns>Name of the remote cache.</returns>
        </member>
        <member name="T:GridGain.Client.IGridClientDataAffinity">
            <summary>
            Interface that will determine which node should be connected by the client when
            operation on a key is requested.
            <para/>
            If implementation of data affinity implements <see ctype="GridClientTopologyListener"/> interface as well,
            then affinity will be added to topology listeners on client start before firs connection is established
            and will be removed after last connection is closed.</summary>
        </member>
        <member name="M:GridGain.Client.IGridClientDataAffinity.Node``1(System.Object,System.Collections.Generic.ICollection{``0})">
             <summary>
             Gets affinity nodes for a key. In case of replicated cache, all returned
             nodes are updated in the same manner. In case of partitioned cache, the returned
             list should contain only the primary and back up nodes with primary node being
             always first.</summary>
            
             <param name="key">Key to get affinity for.</param>
             <param name="nodes">Nodes to choose from.</param>
             <returns>Affinity nodes for the given partition.</returns>
        </member>
        <member name="T:GridGain.Client.IGridClientDataConfiguration">
            <summary>Java client data projection configuration.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataConfiguration.Name">
            <summary>Remote cache name.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataConfiguration.Affinity">
            <summary>Cache affinity to use.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientDataConfiguration.PinnedBalancer">
            <summary>Node balancer for pinned mode.</summary> 
        </member>
        <member name="T:GridGain.Client.GridClientDataConfiguration">
            <summary>Data configuration bean.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientDataConfiguration.#ctor">
            <summary>Creates empty configuration.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientDataConfiguration.#ctor(GridGain.Client.IGridClientDataConfiguration)">
             <summary>
             Copy constructor.</summary>
            
             <param name="cfg">Configuration to copy.</param>
        </member>
        <member name="P:GridGain.Client.GridClientDataConfiguration.Affinity">
            <summary>Client data affinity for this configuration.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientDataConfiguration.Name">
            <summary>Grid cache name for this configuration.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientDataConfiguration.PinnedBalancer">
            <summary>Balancer that will be used in pinned mode.</summary> 
        </member>
        <member name="T:GridGain.Client.GridClientFactory">
            <summary>
            Client factory opens and closes clients. It also tracks all currently
            opened clients as well.</summary>
        </member>
        <member name="F:GridGain.Client.GridClientFactory.openClients">
            <summary>Map that contain all opened clients.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientFactory.Start(GridGain.Client.IGridClientConfiguration)">
             <summary>
             Starts a client with given configuration. Starting client will be assigned a randomly generated
             Guid which can be obtained by <see ctype="GridClient#id()"/> method.</summary>
            
             <param name="cfg">Client configuration.</param>
             <returns>Started client.</returns>
             <exception cref="T:GridGain.Client.GridClientException">If client could not be created.</exception>
        </member>
        <member name="M:GridGain.Client.GridClientFactory.StopAll">
             <summary>
             Waits for all open clients to finish their operations and stops them, This method
             is equivalent to <c>stopAll(true)</c> method invocation.</summary>
            
             @see #stopAll(bool)
        </member>
        <member name="M:GridGain.Client.GridClientFactory.StopAll(System.Boolean)">
             <summary>
             Stops all currently open clients.</summary>
            
             <param name="wait">If <c>true</c> then each client will wait to finish all ongoing requests before</param>
                  closing (however, no new requests will be accepted). If <c>false</c>, clients will be
                  closed immediately and all ongoing requests will be failed.
        </member>
        <member name="M:GridGain.Client.GridClientFactory.Stop(System.Guid)">
             <summary>
             Waits for all pending requests for a particular client to be completed (no new requests will be
             accepted) and then closes the client. This method is equivalent to <c>stop(clientId, true)</c>.</summary>
            
             <param name="clientId">Identifier of client to close.</param>
             @see #stop(Guid, bool)
        </member>
        <member name="M:GridGain.Client.GridClientFactory.Stop(System.Guid,System.Boolean)">
             <summary>
             Stops particular client.</summary>
            
             <param name="clientId">Client identifier to close.</param>
             <param name="wait">If <c>true</c> then client will wait to finish all ongoing requests before</param>
                  closing (however, no new requests will be accepted). If <c>false</c>, client will be
                  closed immediately and all ongoing requests will be failed.
        </member>
        <member name="M:GridGain.Client.GridClientFactory.StopSilent(GridGain.Client.Impl.GridClientImpl,System.Boolean)">
             <summary>
             Stops client silently.</summary>
            
             <param name="client">Client to stop.</param>
             <param name="waitCompletion">If <c>true</c> will wait for all pending requests to be proceeded.</param>
        </member>
        <member name="T:GridGain.Client.IGridClientFuture">
            <summary>Future for asynchronous operations.</summary> 
        </member>
        <member name="M:GridGain.Client.IGridClientFuture.WaitDone">
             <summary>
             Synchronously waits for task completion.</summary>
            
             <exception cref="T:GridGain.Client.GridClientException">If task execution fails with exception.</exception>
        </member>
        <member name="P:GridGain.Client.IGridClientFuture.IsDone">
            <summary>Future is done flag.</summary> 
        </member>
        <member name="T:GridGain.Client.IGridClientFuture`1">
            <summary>Generic future with result for asynchronous operations.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientFuture`1.Result">
             <summary>
             Synchronously waits for task completion and returns execution result.</summary>
            
             <exception cref="T:GridGain.Client.GridClientException">If task execution fails with exception.</exception>
        </member>
        <member name="T:GridGain.Client.IGridClientNode">
            <summary>Node descriptor.</summary> 
        </member>
        <member name="M:GridGain.Client.IGridClientNode.Attribute``1(System.String)">
             <summary>
             Gets node attribute.</summary>
            
             <param name="name">Attribute name.</param>
             <returns>Attribute value.</returns>
        </member>
        <member name="M:GridGain.Client.IGridClientNode.Attribute``1(System.String,``0)">
             <summary>
             Gets node attribute.</summary>
            
             <param name="name">Attribute name.</param>
             <param name="def">Default attribute value, if attribute not set.</param>
             <returns>Attribute value.</returns>
        </member>
        <member name="M:GridGain.Client.IGridClientNode.AvailableAddresses(GridGain.Client.GridClientProtocol)">
             <summary>
             Gets list of addresses on which REST binary protocol is bound.</summary>
            
             <param name="proto">Protocol for which addresses are obtained.</param>
             <returns>List of addresses.</returns>
        </member>
        <member name="P:GridGain.Client.IGridClientNode.Id">
            <summary>Node ID.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNode.InternalAddresses">
            <summary>List of node internal addresses.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNode.ExternalAddresses">
            <summary>List of node external addresses.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNode.TcpPort">
            <summary>Remote tcp port.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNode.HttpPort">
            <summary>Remote http port.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNode.Metrics">
            <summary>Node metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.IGridClientNode.Caches">
            <summary>
            All configured caches and their types on remote node: map in which
            key is a configured cache name and value is a mode of this cache.</summary>
        </member>
        <member name="P:GridGain.Client.IGridClientNode.Attributes">
            <summary>Node attributes.</summary> 
        </member>
        <member name="T:GridGain.Client.GridClientPartitionedAffinity">
            <summary>
            Affinity function for partitioned cache. This function supports the following configuration:
            <ul>
            <li>
                <c>backups</c> - Use ths flag to control how many back up nodes will be
                assigned to every key. The default value is defined by <see ctype="DefaultBackupsCount"/>.
            </li>
            <li>
                 <c>replicas</c> - Generally the more replicas a node gets, the more key assignments
                 it will receive. You can configure different number of replicas for a node by
                 setting user attribute with name <see ctype="#getReplicaCountAttributeName()"/> to some
                 number. Default value is <c>512</c> defined by <see ctype="#DFLT_REPLICA_CNT"/> constant.
            </li>
            <li>
                 <c>backupFilter</c> - Optional filter for back up nodes. If provided, then only
                 nodes that pass this filter will be selected as backup nodes and only nodes that
                 don't pass this filter will be selected as primary nodes. If not provided, then
                 primary and backup nodes will be selected out of all nodes available for this cache.
                 <para/>
                 NOTE: In situations where there are no primary nodes at all, i.e. no nodes for which backup
                 filter returns <c>false</c>, first backup node for the key will be considered primary.
            </li>
            </ul>
            </summary>
        </member>
        <member name="F:GridGain.Client.GridClientPartitionedAffinity.DefaultPartitionsCount">
            <summary>Default number of partitions.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientPartitionedAffinity.DefaultBackupsCount">
            <summary>Default number of backups.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientPartitionedAffinity.DefaultReplicasCount">
            <summary>Default replica count for partitioned caches.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientPartitionedAffinity.DefaultReplicasCountAttributeName">
            <summary>
            Name of node attribute to specify number of replicas for a node.
            Default value is <c>gg:affinity:node:replicas</c>.</summary>
        </member>
        <member name="F:GridGain.Client.GridClientPartitionedAffinity.nodeHash">
            <summary>Node hash.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientPartitionedAffinity.addedNodes">
            <summary>Set of node IDs.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.#ctor">
            <summary>Empty constructor with all defaults.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.#ctor(System.Int32)">
             <summary>
             Initializes affinity with specified number of backups.</summary>
            
             <param name="backups">Number of back up servers per key.</param>
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.#ctor(System.Int32,System.Int32,System.Predicate{System.Guid},GridGain.Client.Hasher.IGridClientHasher)">
             <summary>
             Initializes optional counts for replicas and backups.
             <para/>
             Note that <c>excludeNeighbors</c> parameter is ignored if <c>backupFilter</c> is set.</summary>
            
             <param name="backups">Backups count.</param>
             <param name="parts">Total number of partitions.</param>
             <param name="backupsFilter">Optional back up filter for nodes. If provided, then primary nodes</param>
                  will be selected from all nodes outside of this filter, and backups will be selected
                  from all nodes inside it.
             <param name="hasher">Hasher that will be used to calculate key hashes.</param>
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.Node``1(System.Object,System.Collections.Generic.ICollection{``0})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.Partition(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.OnNodeAdded(GridGain.Client.IGridClientNode)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.OnNodeRemoved(GridGain.Client.IGridClientNode)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.Replicas(GridGain.Client.IGridClientNode)">
             <summary>
             </summary>
            
             <param name="n">Node.</param>
             <returns>Replicas.</returns>
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.AddIfAbsent``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             </summary>
            
             <param name="nodes">Nodes to add.</param>
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.AddIfAbsent(GridGain.Client.IGridClientNode)">
             <summary>
             </summary>
            
             <param name="n">Node to add.</param>
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.Add(System.Guid,System.Int32)">
             <summary>
             </summary>
            
             <param name="id">Node ID to add.</param>
             <param name="replicas">Replicas.</param>
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.CheckRemoved(GridGain.Client.IGridClientNode)">
             <summary>
             </summary>
            
             Cleans up removed nodes.
             <param name="node">Node that was removed from topology.</param>
        </member>
        <member name="M:GridGain.Client.GridClientPartitionedAffinity.LookupFilter``1(System.Collections.Generic.IDictionary{System.Guid,``0},System.Predicate{System.Guid},System.Boolean)">
            <summary>Lookup filter.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientPartitionedAffinity.ReplicasCount">
            <summary>
            Number of virtual replicas in consistent hash ring.
            <para/>
            To determine node replicas, node attribute with <see ctype="#getReplicaCountAttributeName()"/>
            name will be checked first. If it is absent, then this value will be used.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientPartitionedAffinity.BackupsCount">
            <summary>Count of key backups for redundancy.</summary> 
        </member>
        <member name="P:GridGain.Client.GridClientPartitionedAffinity.Partitions">
            <summary>
            Total number of key partitions. To ensure that all partitions are
            equally distributed across all nodes, please make sure that this
            number is significantly larger than a number of nodes. Also, partition
            size should be relatively small. Try to avoid having partitions with more
            than quarter million keys.
            <para/>
            Note that for fully replicated caches this method should always
            return <c>1</c>.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientPartitionedAffinity.BackupsFilter">
            <summary>
            Optional backup filter. If not <c>null</c>, then primary nodes will be
            selected from all nodes outside of this filter, and backups will be selected
            from all nodes inside it.
            <para/>
            Note that <c>excludeNeighbors</c> parameter is ignored if <c>backupFilter</c> is set.</summary>
        </member>
        <member name="P:GridGain.Client.GridClientPartitionedAffinity.ReplicasCountAttributeName">
            <summary>
            Gets optional attribute name for replica count. If not provided, the
            default is <see ctype="#DefaultReplicaCountAttributeName"/>.</summary>
        </member>
        <member name="T:GridGain.Client.GridClientProtocol">
            <summary>Protocol that will be used when client connections are created.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientProtocol.Http">
            <summary>Communication via HTTP protocol.</summary> 
        </member>
        <member name="F:GridGain.Client.GridClientProtocol.Tcp">
            <summary>Communication via tcp binary protocol.</summary> 
        </member>
        <member name="T:GridGain.Client.GridClientServerUnreachableException">
            <summary>
            This exception is thrown when none of the servers specified in client configuration can be
            connected to within timeout.</summary>
        </member>
        <member name="M:GridGain.Client.GridClientServerUnreachableException.#ctor">
            <summary>Constructs an exception.</summary> 
        </member>
        <member name="M:GridGain.Client.GridClientServerUnreachableException.#ctor(System.String)">
             <summary>
             Creates exception with specified error message.</summary>
            
             <param name="msg">Error message.</param>
        </member>
        <member name="M:GridGain.Client.GridClientServerUnreachableException.#ctor(System.String,System.Exception)">
             <summary>
             Creates exception with specified error message and cause.</summary>
            
             <param name="msg">Error message.</param>
             <param name="cause">Error cause.</param>
        </member>
        <member name="M:GridGain.Client.GridClientServerUnreachableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Constructs an exception.</summary>
            
             <param name="info">Serialization info.</param>
             <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:GridGain.Client.Util.GridClientFinishedFuture`1">
            <summary>Represents a future that already have a result and will never wait.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientFinishedFuture`1._get">
            <summary>Future execution result.</summary> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientFinishedFuture`1.#ctor(System.Func{`0})">
             <summary>
             Creates succeeded future with given result.</summary>
            
             <param name="get">Future result delegate.</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientFinishedFuture`1.#ctor(`0)">
             <summary>
             Creates succeeded future with given result.</summary>
            
             <param name="result">Future result.</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientFinishedFuture`1.WaitDone">
             <summary>
             Synchronously waits for task completion.</summary>
            
             <exception cref="T:GridGain.Client.GridClientException">If task execution fails with exception.</exception>
        </member>
        <member name="P:GridGain.Client.Util.GridClientFinishedFuture`1.Result">
             <summary>
             Synchronously waits for task completion and returns execution result.</summary>
            
             <exception cref="T:GridGain.Client.GridClientException">If task execution fails with exception.</exception>
        </member>
        <member name="P:GridGain.Client.Util.GridClientFinishedFuture`1.IsDone">
            <summary>Future is done flag.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.GridClientAbstractProjection`1">
            <summary>Class contains common connection-error handling logic.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientAbstractProjection`1.RetryCount">
            <summary>Count of reconnect retries before exception is thrown.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientAbstractProjection`1._nodes">
            <summary>List of nodes included in this projection. If null, all nodes in topology are included.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientAbstractProjection`1._filter">
            <summary>Node filter to be applied for this projection.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientAbstractProjection`1._balancer">
            <summary>Node filter to be applied for this projection.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientAbstractProjection`1.cfg">
            <summary>Projection configuration.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.#ctor(GridGain.Client.Impl.IGridClientProjectionConfig,System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode},System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
             <summary>
             Creates projection with specified client.</summary>
            
             <param name="cfg">Progjection configuration.</param>
             <param name="nodes">Collections of nodes included in this projection.</param>
             <param name="filter">Node filter to be applied.</param>
             <param name="balancer">Balancer to use.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.WithReconnectHandling``1(System.Func{GridGain.Client.Impl.IGridClientConnection,``0})">
             <summary>
             This method executes request to a communication layer and handles connection error, if it occurs.
             In case of communication exception client instance is notified and new instance of client is created.
             If none of the grid servers can be reached, an exception is thrown.</summary>
            
             <param name="c">Closure to be executed.</param>
             <returns>Closure result.</returns>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">
             If either none of the server can be reached or each attempt of communication within <see cref="F:GridGain.Client.Impl.GridClientAbstractProjection`1.RetryCount"/>
             attempts resulted in <see cref="T:GridGain.Client.Impl.GridClientConnectionResetException"/></exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.WithReconnectHandling``1(System.Func{GridGain.Client.Impl.IGridClientConnection,``0},System.String,System.Object)">
             <summary>
             This method executes request to a communication layer and handles connection error, if it occurs. Server
             is picked up according to the projection affinity and key given. Connection will be made with the node
             on which key is cached. In case of communication exception client instance is notified and new instance
             of client is created. If none of servers can be reached, an exception is thrown.</summary>
            
             <param name="c">Closure to be executed.</param>
             <param name="cacheName">Cache name for which mapped node will be calculated.</param>
             <param name="affKey">Affinity key.</param>
             <returns>Closure result.</returns>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the nodes can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.CheckNodeAlive(System.Guid)">
             <summary>
             Tries to refresh node on every possible connection in topology.</summary>
            
             <param name="nodeId">Node id to check.</param>
             <returns><c>True</c> if response was received, <c>null</c> if either <c>null</c> response received
             or no nodes can be contacted at all.</returns>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.ProjectionNodes">
             <summary>
             Gets most recently refreshed topology. If this compute instance is a projection,
             then only nodes that satisfy projection criteria will be returned.</summary>
            
             <returns>Most recently refreshed topology.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.BalancedNode">
             <summary>
             Return balanced node for current projection.</summary>
            
             <returns>Balanced node.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If topology is empty.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.CreateProjection(System.Collections.Generic.ICollection{GridGain.Client.IGridClientNode},System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
             <summary>
             Creates a sub-projection for current projection.</summary>
            
             <param name="nodes">Collection of nodes that sub-projection will be restricted to. If <c>null</c>,</param>
                  created projection is dynamic and will take nodes from topology.
             <param name="filter">Filter to be applied to nodes in projection.</param>
             <param name="balancer">Balancer to use in projection.</param>
             <returns>Created projection.</returns>
             <exception cref="T:GridGain.Client.GridClientException">
             If resulting projection is empty. Note that this exception may only be thrown on
             case of static projections, i.e. where collection of nodes is not null.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.CreateProjectionImpl(System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode},System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
             <summary>
             Subclasses must implement this method and return concrete implementation of projection needed.</summary>
            
             <param name="nodes">Nodes that are included in projection.</param>
             <param name="filter">Filter to be applied.</param>
             <param name="balancer">Balancer to be used.</param>
             <returns>Created projection.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientAbstractProjection`1.Intersection(System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode},System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode})">
             <summary>
             Calculates intersection of two collections. Returned collection always a new collection.</summary>
            
             <param name="first">First collection to intersect.</param>
             <param name="second">Second collection to intersect.</param>
             <returns>Intersection or <c>null</c> if both collections are <c>null</c>.</returns>
        </member>
        <member name="T:GridGain.Client.Impl.GridClientComputeImpl">
            <summary>Compute projection implementation.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.#ctor(GridGain.Client.Impl.IGridClientProjectionConfig,System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode},System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
             <summary>
             Creates a new compute projection.</summary>
            
             <param name="cfg">Projection configuration.</param>
             <param name="nodes">Nodes to be included in this projection.</param>
             <param name="nodeFilter">Node filter to be used for this projection.</param>
             <param name="balancer">Balancer to be used in this projection.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Projection(GridGain.Client.IGridClientNode)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Projection(System.Predicate{GridGain.Client.IGridClientNode})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Projection(System.Collections.Generic.ICollection{GridGain.Client.IGridClientNode})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Projection(System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Projection(System.Collections.Generic.ICollection{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Execute``1(System.String,System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.ExecuteAsync``1(System.String,System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.AffinityExecute``1(System.String,System.String,System.Object,System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.AffinityExecuteAsync``1(System.String,System.String,System.Object,System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Node(System.Guid)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Nodes">
             <summary>
             Gets most recently refreshed topology. If this compute instance is a projection,
             then only nodes that satisfy projection criteria will be returned.</summary>
            
             <returns>Most recently refreshed topology.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Nodes(System.Collections.Generic.ICollection{System.Guid})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Nodes(System.Predicate{GridGain.Client.IGridClientNode})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.RefreshNode(System.Guid,System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.RefreshNodeAsync(System.Guid,System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.RefreshNode(System.String,System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.RefreshNodeAsync(System.String,System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.RefreshTopology(System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.RefreshTopologyAsync(System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Log(System.Int32,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.LogAsync(System.Int32,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.Log(System.String,System.Int32,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.LogAsync(System.String,System.Int32,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientComputeImpl.CreateProjectionImpl(System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode},System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientComputeImpl.Balancer">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.Impl.IGridClientConnection">
            <summary>
            Facade for all possible network communications between client and server. Introduced to hide
            protocol implementation (TCP, HTTP) from client code.</summary>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.Close(System.Boolean)">
             <summary>
             Closes connection facade.</summary>
            
             <param name="waitCompletion">If <c>true</c> this method will wait until all pending requests are handled.</param>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CloseIfIdle(System.TimeSpan)">
             <summary>
             Closes connection facade if no requests are in progress.</summary>
            
             <returns>Idle timeout.</returns>
             <returns><c>True</c> if no requests were in progress and client was closed, <c>True</c> otherwise.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CachePut``2(System.String,``0,``1)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <param name="val">Value.</param>
             <returns>If value was actually put.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CacheGet``2(System.String,``0)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <returns>Value.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CacheRemove``1(System.String,``0)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <returns>Whether entry was actually removed.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CachePutAll``2(System.String,System.Collections.Generic.IDictionary{``0,``1})">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="entries">Entries.</param>
             <returns><c>True</c> if map contained more then one entry or if put succeeded in case of one entry,</returns>
                  <c>false</c> otherwise
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CacheGetAll``2(System.String,System.Collections.Generic.IEnumerable{``0})">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="keys">Keys.</param>
             <returns>Entries.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CacheRemoveAll``1(System.String,System.Collections.Generic.IEnumerable{``0})">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="keys">Keys.</param>
             <returns>Whether operation finishes.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CacheAdd``2(System.String,``0,``1)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <param name="val">Value.</param>
             <returns>Whether entry was added.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CacheReplace``2(System.String,``0,``1)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <param name="val">Value.</param>
             <returns>Whether value was actually replaced.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CacheCompareAndSet``2(System.String,``0,``1,``1)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <param name="val1">Value 1.</param>
             <param name="val2">Value 2.</param>
             <returns>Whether new value was actually set.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.CacheMetrics``1(System.String,``0)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <returns>Metrics.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.Execute``1(System.String,System.Object)">
             <summary>
             Requests task execution with specified name.</summary>
            
             <param name="taskName">Task name.</param>
             <param name="taskArg">Task argument.</param>
             <returns>Task execution result.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.Node(System.Guid,System.Boolean,System.Boolean)">
             <summary>
             Requests node by its ID.</summary>
            
             <param name="id">Node ID.</param>
             <param name="includeAttrs">Whether to include attributes.</param>
             <param name="includeMetrics">Whether to include metrics.</param>
             <returns>Node.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.Node(System.String,System.Boolean,System.Boolean)">
             <summary>
             Requests node by its IP address.</summary>
            
             <param name="ipAddr">IP address.</param>
             <param name="includeAttrs">Whether to include attributes.</param>
             <param name="includeMetrics">Whether to include metrics.</param>
             <returns>Node.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.Topology(System.Boolean,System.Boolean)">
             <summary>
             Requests actual grid topology.</summary>
            
             <param name="includeAttrs">Whether to include attributes.</param>
             <param name="includeMetrics">Whether to include metrics.</param>
             <returns>Nodes.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientConnection.Log(System.String,System.Int32,System.Int32)">
             <summary>
             Requests server log entries in specified scope.</summary>
            
             <param name="path">Log file path.</param>
             <param name="fromLine">Index of start line that should be retrieved.</param>
             <param name="toLine">Index of end line that should be retrieved.</param>
             <returns>Log file contents.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="P:GridGain.Client.Impl.IGridClientConnection.ServerAddress">
            <summary>Server address this connection linked to.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.GridClientConnectionAdapter">
            <summary>
            Facade for all possible network communications between client and server. Introduced to hide
            protocol implementation (TCP, HTTP) from client code.</summary>
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionAdapter.Top">
            <summary>Topology</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionAdapter.ClientId">
            <summary>Client id.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionAdapter.Credentials">
            <summary>Client credentials.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionAdapter.SslCtx">
            <summary>SSL context to use if ssl is enabled.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.#ctor(System.Guid,System.Net.IPEndPoint,GridGain.Client.Ssl.IGridClientSslContext,System.Object,GridGain.Client.Impl.GridClientTopology)">
             <summary>
             Creates a facade.</summary>
            
             <param name="clientId">Client identifier.</param>
             <param name="srvAddr">Server address this connection connected to.</param>
             <param name="sslCtx">SSL context to use if SSL is enabled, <c>null</c> otherwise.</param>
             <param name="credentials">Authentication credentials</param>
             <param name="top">Topology.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.Close(System.Boolean)">
             <summary>
             Closes the connection.</summary>
            
             <param name="waitCompletion">If <c>true</c> will wait for all pending requests to be proceeded.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CloseIfIdle(System.TimeSpan)">
             <summary>
             Closes connection facade if no requests are in progress.</summary>
            
             <returns>Idle timeout.</returns>
             <returns><c>True</c> if no requests were in progress and client was closed, <c>True</c> otherwise.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CachePut``2(System.String,``0,``1)">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <returns>If value was actually put.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CacheGet``2(System.String,``0)">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="key">Key.</param>
            <returns>Value.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CacheRemove``1(System.String,``0)">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="key">Key.</param>
            <returns>Whether entry was actually removed.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CachePutAll``2(System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="entries">Entries.</param>
            <returns><c>True</c> if map contained more then one entry or if put succeeded in case of one entry,</returns>
                 <c>false</c> otherwise
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CacheGetAll``2(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="keys">Keys.</param>
            <returns>Entries.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CacheRemoveAll``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="keys">Keys.</param>
            <returns>Whether operation finishes.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CacheAdd``2(System.String,``0,``1)">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <returns>Whether entry was added.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CacheReplace``2(System.String,``0,``1)">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <returns>Whether value was actually replaced.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CacheCompareAndSet``2(System.String,``0,``1,``1)">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="key">Key.</param>
            <param name="val1">Value 1.</param>
            <param name="val2">Value 2.</param>
            <returns>Whether new value was actually set.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.CacheMetrics``1(System.String,``0)">
            <summary>
            </summary>
            <param name="cacheName">Cache name.</param>
            <param name="key">Key.</param>
            <returns>Metrics.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.Execute``1(System.String,System.Object)">
            <summary>
            </summary>
            <param name="taskName">Task name.</param>
            <param name="taskArg">Task arguments.</param>
            <returns>Task execution result.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.Node(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="id">Node ID.</param>
            <param name="includeAttrs">Whether to include attributes.</param>
            <param name="includeMetrics">Whether to include metrics.</param>
            <returns>Node.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.Node(System.String,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="ipAddr">IP address.</param>
            <param name="includeAttrs">Whether to include attributes.</param>
            <param name="includeMetrics">Whether to include metrics.</param>
            <returns>Node.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.Topology(System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="includeAttrs">Whether to include attributes.</param>
            <param name="includeMetrics">Whether to include metrics.</param>
            <returns>Nodes.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.Log(System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="path">Log file path.</param>
            <param name="fromLine">Index of start line that should be retrieved.</param>
            <param name="toLine">Index of end line that should be retrieved.</param>
            <returns>Log file contents.</returns>
            <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
            <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed before request was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.parseCacheMetrics(System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
             Convert the map representation of the cache metrics to an equivalent objects.</summary>
            
             <param name="data">Map of raw cache metrics.</param>
             <returns>Converted cache metrics.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.parseNodeMetrics(System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
             Convert the map representation of the node metrics to an equivalent objects.</summary>
            
             <param name="data">Map of raw node metrics.</param>
             <returns>Converted node metrics.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.parseCacheModes(System.Collections.Generic.IDictionary{System.String,System.String})">
             <summary>
             Convert the string representation of the cache mode names to an equivalent enumerated objects.</summary>
            
             <param name="rawCaches">Map of raw cache modes.</param>
             <returns>Converted cache modes.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.parseCacheMode(System.String)">
             <summary>
             Converts the string representation of the cache mode name to an equivalent enumerated object.</summary>
            
             <param name="val">A string containing the name to convert.</param>
             <returns>Parsed cache mode.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.AsDouble(System.Object)">
             <summary>
             Convert any object to double value.</summary>
            
             <param name="val">Json object to convert.</param>
             <returns>Double value.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.asLong(System.Object)">
             <summary>
             Convert any object to long value.</summary>
            
             <param name="val">Json object to convert.</param>
             <returns>Long value.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.safeLong(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Safely get long value from the dictionary by the key.</summary>
            
            <param name="map">Map to get value from.</param>
            <param name="key">Key in the map to get value for.</param>
            <returns>Parsed value if map contains specified key and corresponding value 
            can be parsed to expected type, <c>-1</c> - otherwise.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.safeDouble(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Safely get double value from the dictionary by the key.</summary>
            
            <param name="map">Map to get value from.</param>
            <param name="key">Key in the map to get value for.</param>
            <returns>Parsed value if map contains specified key and corresponding value 
            can be parsed to expected type, <c>-1</c> - otherwise.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionAdapter.safe``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0,GridGain.Client.Impl.GridClientConnectionAdapter.Parser{``0})">
            <summary>
            Safely get value from the dictionary or return failure value.</summary>
            
            <param name="map">Map to get value from.</param>
            <param name="key">Key in the map to get value for.</param>
            <param name="def">Default value to return if get operation fails.</param>
            <param name="parser">Parser callback.</param>
            <returns>Parsed value if map contains specified key and corresponding value can be parsed to expected type.</returns>
        </member>
        <member name="P:GridGain.Client.Impl.GridClientConnectionAdapter.ServerAddress">
            <summary>Server address this connection connected to</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.GridClientConnectionAdapter.Parser`1">
            <summary>
            Parser safely converts string value to expected type.</summary>
            
            <param name="s">String value to parse.</param>
            <param name="res">Variable to save parsed result to on success</param>
            <returns><c>True</c> if operation succeed, <c>false</c> - otherwize.</returns>
        </member>
        <member name="T:GridGain.Client.Impl.GridClientConnectionManager">
            <summary>Connections manager.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.DefaultIdleTimeout">
            <summary>Default timeout to close idle connections</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.guard">
            <summary>Connect lock.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.conns">
            <summary>Active connections.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.proto">
            <summary>Connection protocol.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.sslCtx">
            <summary>SSL context.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.connectTimeout">
            <summary>TCP connection timeouts</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.clientId">
            <summary>Client id.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.credentials">
            <summary>Connection credentials.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.top">
            <summary>Client topology.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientConnectionManager.closed">
            <summary>Closed flag.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.#ctor(System.Guid,GridGain.Client.Impl.GridClientTopology,System.Object,GridGain.Client.GridClientProtocol,GridGain.Client.Ssl.IGridClientSslContext,System.Int32)">
             <summary>
             Constructs connection manager.</summary>
            
             <param name="clientId">Client ID.</param>
             <param name="top">Topology.</param>
             <param name="credentials">Connection credentials.</param>
             <param name="proto">Connection protocol.</param>
             <param name="sslCtx">SSL context to enable secured connection or <c>null</c> to use unsecured one.</param>
             <param name="connectTimeout">TCP connection timeout.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.connection(GridGain.Client.IGridClientNode)">
             <summary>
             Gets active communication facade.</summary>
            
             <param name="node">Remote node to which connection should be established.</param>
             <returns>Communication facade.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached after the exception.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.connection(System.Collections.Generic.ICollection{System.Net.IPEndPoint})">
             <summary>
             Gets active communication facade.</summary>
            
             <param name="srvs">Remote nodes to which connection should be established.</param>
             <returns>Communication facade.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached after the exception.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed manually.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.connect(System.Collections.Generic.ICollection{System.Net.IPEndPoint})">
             <summary>
             Creates a connected facade and returns it. Called either from constructor or inside
             a write lock.</summary>
            
             <param name="srvs">List of server addresses that this method will try to connect to.</param>
             <returns>Connected client facade.</returns>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.connect(System.Net.IPEndPoint)">
            <summary>
            Create new connection to specified server.</summary>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.onFacadeFailed(GridGain.Client.IGridClientNode,GridGain.Client.Impl.IGridClientConnection,GridGain.Client.Impl.GridClientConnectionResetException)">
             <summary>
             Handles communication connection failure. Tries to reconnect to any of the servers specified and
             throws an exception if none of the servers can be reached.</summary>
            
             <param name="node">Remote node for which this connection belongs to.</param>
             <param name="conn">Facade that caused the exception.</param>
             <param name="e">Exception.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.closeAll(System.Boolean)">
             <summary>
             Closes all opened connections.</summary>
            
             <param name="waitCompletion">If <c>true</c> will wait for all pending requests to be proceeded.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.closeIdle(System.TimeSpan)">
             <summary>
             Close all idle connections more then "timeout" milliseconds.</summary>
            
             <param name="timeout">Idle timeout in ms.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.removeConnections(System.Predicate{GridGain.Client.Impl.IGridClientConnection})">
             <summary>
             Guarded remove connections from the cache. Expects writer lock held.</summary>
            
             <param name="condition">Condition for connections to remove.</param>
             <returns>Removed connections from the cache.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.checkClosed">
             <summary>
             Checks and throws an exception if this client was closed.</summary>
            
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionManager.closeSilent(GridGain.Client.Impl.IGridClientConnection,System.Boolean)">
             <summary>
             Silent connection close.</summary>
            
             <param name="conn">Connection to close.</param>
             <param name="waitCompletion">If <c>true</c> will wait for all pending requests to be proceeded.</param>
        </member>
        <member name="T:GridGain.Client.Impl.GridClientConnectionResetException">
            <summary>
            This exception is thrown when ongoing packet should be sent, but network connection is broken.
            In this case client will try to reconnect to any of the servers specified in configuration.</summary>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionResetException.#ctor">
            <summary>Constructs an exception.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionResetException.#ctor(System.String)">
             <summary>
             Creates an exception with given message.</summary>
            
             <param name="msg">Error message.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionResetException.#ctor(System.String,System.Exception)">
             <summary>
             Creates an exception with given message and error cause.</summary>
            
             <param name="msg">Error message.</param>
             <param name="cause">Wrapped exception.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionResetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Constructs an exception.</summary>
            
             <param name="info">Serialization info.</param>
             <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:GridGain.Client.Impl.GridClientDataImpl">
            <summary>Data projection that serves one cache instance and handles communication errors.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.#ctor(System.String,GridGain.Client.Impl.IGridClientProjectionConfig,System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode},System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
             <summary>
             Creates a data projection.</summary>
            
             <param name="cacheName">Cache name for projection.</param>
             <param name="cfg">Projection configuration.</param>
             <param name="nodes">Pinned nodes.</param>
             <param name="filter">Node filter.</param>
             <param name="balancer">Pinned node balancer.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.PinNodes(GridGain.Client.IGridClientNode,GridGain.Client.IGridClientNode[])">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.PinnedNodes">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.Put``2(``0,``1)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.PutAsync``2(``0,``1)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.PutAll``2(System.Collections.Generic.IDictionary{``0,``1})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.PutAllAsync``2(System.Collections.Generic.IDictionary{``0,``1})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.GetItem``2(``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.GetAsync``2(``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.GetAll``2(System.Collections.Generic.ICollection{``0})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.GetAllAsync``2(System.Collections.Generic.ICollection{``0})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.Remove``1(``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.RemoveAsync``1(``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.RemoveAll``1(System.Collections.Generic.ICollection{``0})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.RemoveAllAsync``1(System.Collections.Generic.ICollection{``0})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.Replace``2(``0,``1)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.ReplaceAsync``2(``0,``1)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.Cas(System.String,System.String,System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.CasAsync(System.String,System.String,System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.Affinity``1(``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.Metrics">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.MetricsAsync">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.Metrics``1(``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.MetricsAsync``1(``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientDataImpl.CreateProjectionImpl(System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode},System.Predicate{GridGain.Client.IGridClientNode},GridGain.Client.Balancer.IGridClientLoadBalancer)">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientDataImpl.CacheName">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.Util.GridClientFuture">
            <summary>Future base implementation.</summary> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientFuture.WaitDone">
             <summary>
             Synchronously waits for completion.</summary>
            
             <exception cref="T:GridGain.Client.GridClientException">If task execution fails with exception.</exception>
        </member>
        <member name="M:GridGain.Client.Util.GridClientFuture.Done(System.Object)">
             <summary>
             Callback to notify that future is finished successfully.</summary>
            
             <param name="res">Result (can be <c>null</c>).</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientFuture.Fail(System.Action)">
             <summary>
             Callback to notify that future is finished with error. 
             Note! Should always throw kind of GridClientException.</summary>
            
             <param name="err">Error (can't be <c>null</c>).</param>
        </member>
        <member name="P:GridGain.Client.Util.GridClientFuture.IsDone">
             <summary>
             Checks if future is done.</summary>
            
             <returns>Whether future is done.</returns>
        </member>
        <member name="T:GridGain.Client.Util.GridClientFuture`1">
            <summary>Future generic implementation.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientFuture`1.doneLatch">
            <summary>Latch.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientFuture`1.done">
            <summary>Done flag.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientFuture`1.res">
            <summary>Future task execution result.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientFuture`1.err">
            <summary>Error callback, should always throw GridClientException.</summary> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientFuture`1.WaitDone">
             <summary>
             Synchronously waits for completion.</summary>
            
             <exception cref="T:GridGain.Client.GridClientException">If task execution fails with exception.</exception>
        </member>
        <member name="M:GridGain.Client.Util.GridClientFuture`1.Done(System.Object)">
             <summary>
             Callback to notify that future is finished successfully.</summary>
            
             <param name="res">Result (can be <c>null</c>).</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientFuture`1.Done(`0)">
             <summary>
             Callback to notify that future is finished successfully.</summary>
            
             <param name="res">Result (can be <c>null</c>).</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientFuture`1.Fail(System.Action)">
             <summary>
             Callback to notify that future is finished with error.
             Note! Pass in new exception instance to preserve exception stack trace.</summary>
            
             <param name="err">Error (can't be <c>null</c>).</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientFuture`1.Done(System.Action)">
             <summary>
             Update future state on complete.</summary>
            
             <param name="updateCallback">Update delegate to set future result in thread-safe environment.</param>
        </member>
        <member name="P:GridGain.Client.Util.GridClientFuture`1.DoneCallback">
            <summary>Callback delegate to call on future finishes.</summary> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientFuture`1.DoneConverter">
            <summary>Successfull done converter from object to expected type.</summary> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientFuture`1.Result">
             <summary>
             Synchronously waits for task completion and returns execution result.</summary>
            
             <exception cref="T:GridGain.Client.GridClientException">If task execution fails with exception.</exception>
        </member>
        <member name="P:GridGain.Client.Util.GridClientFuture`1.IsDone">
             <summary>
             Checks if future is done.</summary>
            
             <returns>Whether future is done.</returns>
        </member>
        <member name="T:GridGain.Client.Impl.GridClientImpl">
            <summary>Client implementation.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.IGridClientProjectionConfig">
            <summary>Interface provides configuration for the client projection(s).</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.IGridClientProjectionConfig.Affinity(System.String)">
             <summary>
             Gets data affinity for a given cache name.</summary>
            
             <param name="cacheName">Name of cache for which affinity is obtained. Data configuration with this name</param>
                 must be configured at client startup.
             <returns>Data affinity object.</returns>
             <exception cref="T:System.ArgumentException">If client data with given name was not configured.</exception>
        </member>
        <member name="P:GridGain.Client.Impl.IGridClientProjectionConfig.ConnectionManager">
            <summary>Connections manager.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.IGridClientProjectionConfig.Topology">
            <summary>Topology instance to be used in this projection.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl.cfg">
            <summary>Client configuration.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl.connMgr">
            <summary>Connections manager.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl.top">
            <summary>Topology.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl._compute">
            <summary>Main compute projection.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl.dataMap">
            <summary>Data projections.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl.idleCheckThread">
            <summary>Connection idle checker thread.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl.topUpdateThread">
            <summary>Topology updater thread.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl.topUpdateBalancer">
            <summary>Topology updater balancer.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientImpl.closed">
            <summary>State of the client.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.#ctor(System.Guid,GridGain.Client.IGridClientConfiguration)">
             <summary>
             Creates a new client based on a given configuration.</summary>
            
             <param name="id">Client identifier.</param>
             <param name="cfg0">Client configuration.</param>
             <exception cref="T:GridGain.Client.GridClientException">If client configuration is incorrect.</exception>
             <exception cref="T:GridGain.Client.GridClientServerUnreachableException">If none of the servers specified in configuration can be reached.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.stop(System.Boolean)">
             <summary>
             Closes client.</summary>
            
             <param name="waitCompletion">If <c>true</c> will wait for all pending requests to be proceeded.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.Data">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.Data(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.Compute">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.AddTopologyListener(GridGain.Client.IGridClientTopologyListener)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.RemoveTopologyListener(GridGain.Client.IGridClientTopologyListener)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.TopologyListeners">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.Affinity(System.String)">
             <summary>
             Gets data affinity for a given cache name.</summary>
            
             <param name="cacheName">Name of cache for which affinity is obtained. Data configuration with this name</param>
                  must be configured at client startup.
             <returns>Data affinity object.</returns>
             <exception cref="T:System.ArgumentException">If client data with given name was not configured.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.checkIdle">
            <summary>
            Thread that checks opened client connections for idle
            and closes connections that idle for a long time.</summary>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.updateTopology">
            <summary>
            Thread that updates topology according to refresh interval specified
            in configuration.</summary>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientImpl.ToString">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientImpl.Id">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientImpl.ConnectionManager">
            <summary>Connections manager.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientImpl.Topology">
            <summary>Topology instance.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.GridClientNodeImpl">
            <summary>Client node implementation.</summary> 
        </member>
        <member name="T:GridGain.Client.Hasher.IGridClientConsistentHashObject">
            <summary>
            Object marked with this interface becomes available for the consistent hash calculation.</summary>
        </member>
        <member name="M:GridGain.Client.Hasher.IGridClientConsistentHashObject.GetHashCode">
             <summary>
             Get object hash code to parcitipate in the consistent hash generation.</summary>
            
             <returns>A hash code for the object.</returns>
        </member>
        <member name="F:GridGain.Client.Impl.GridClientNodeImpl.restAddresses">
            <summary>Reference to a list of addresses.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientNodeImpl.#ctor(System.Guid)">
             <summary>
             Constructs grid client node.</summary>
            
             <param name="nodeId">Node ID.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientNodeImpl.Attribute``1(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientNodeImpl.Attribute``1(System.String,``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientNodeImpl.AvailableAddresses(GridGain.Client.GridClientProtocol)">
             <summary>
             Gets list of all addresses available for connection for tcp rest binary protocol.</summary>
            
             <param name="proto">Protocol type.</param>
             <returns>List of socket addresses.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientNodeImpl.Equals(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientNodeImpl.GetHashCode">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientNodeImpl.ToString">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientNodeImpl.Id">
            <summary>Node id.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientNodeImpl.InternalAddresses">
            <summary>List of node internal addresses.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientNodeImpl.ExternalAddresses">
            <summary>List of node external addresses.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientNodeImpl.TcpPort">
            <summary>Tcp remote port value.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientNodeImpl.HttpPort">
            <summary>Http(s) port value.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientNodeImpl.Attributes">
            <summary>Node attributes.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientNodeImpl.Metrics">
            <summary>Node metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.GridClientNodeImpl.Caches">
            Caches available on remote node.
        </member>
        <member name="T:GridGain.Client.Impl.GridClientTopology">
            <summary>
            Client topology cache.</summary>
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology._nodes">
            <summary>Topology cache</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology.topCache">
            <summary>Flag indicating whether node attributes and metrics should be cached.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology.busyLock">
            <summary>Lock for topology changing.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology.topLsnrs">
            <summary>Topology listeners.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology.evtQ">
            <summary>The queue of topology events awaiting for delivering.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology.evtSndr">
            <summary>Thread for topology events delivering.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology.closed">
            <summary>Closed state flag.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.#ctor(System.Guid,System.Boolean)">
             <summary>
             Creates topology instance.</summary>
            
             <param name="clientId">Client id.</param>
             <param name="topCache">If <c>true</c>, then topology will cache node attributes and metrics.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.AddTopologyListener(GridGain.Client.IGridClientTopologyListener)">
             <summary>
             Adds topology listener.</summary>
            
             <param name="lsnr">Topology listener.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.RemoveTopologyListener(GridGain.Client.IGridClientTopologyListener)">
             <summary>
             Removes topology listener.</summary>
            
             <param name="lsnr">Topology listener.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.TopologyListeners">
             <summary>
             Returns all added topology listeners.</summary>
            
             <returns>Unmodifiable view of topology listeners.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.UpdateNode(GridGain.Client.IGridClientNode)">
             <summary>
             Updates topology if cache enabled. If cache is disabled, returns original node.</summary>
            
             <param name="node">Converted rest server response.</param>
             <returns>Node in topology.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.UpdateTopology(System.Collections.Generic.IEnumerable{GridGain.Client.IGridClientNode})">
             <summary>
             Updates (if cache is enabled) the whole topology. If cache is disabled,
             original collection is returned.</summary>
            
             <param name="nodeList">Converted rest server response.</param>
             <returns>Topology nodes.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.NodeFailed(System.Guid)">
             <summary>
             Updates topology when node that is expected to be in topology fails.</summary>
            
             <param name="nodeId">Node id for which node failed to be obtained.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.Node(System.Guid)">
             <summary>
             Gets node from last saved topology snapshot by it's id.</summary>
            
             <param name="id">Node id.</param>
             <returns>Node or <c>null</c> if node was not found.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.Nodes(System.Collections.Generic.IEnumerable{System.Guid})">
             <summary>
             Gets a collection of nodes from last saved topology snapshot by their ids.</summary>
            
             <param name="ids">Collection of ids for which nodes should be retrieved..</param>
             <returns>Collection of nodes that are in topology.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.Nodes">
             <summary>
             Gets full topology snapshot.</summary>
            
             <returns>Collection of nodes that were in last captured topology snapshot.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.Dispose">
            <summary>
            Shutdowns executor service that performs listener notification.</summary>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.ClearAttributes(GridGain.Client.IGridClientNode)">
             <summary>
             Clears attributes and metrics map in case if node cache is disabled.</summary>
            
             <param name="node">Node to be cleared.</param>
             <returns>The same node if cache is enabled or node contains no attributes and metrics,</returns>
                  otherwise will return new node without attributes and metrics.
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.FireEvents(System.Collections.Generic.IEnumerable{GridGain.Client.Impl.GridClientTopology.TopologyEvent})">
             <summary>
             Runs listener notification is separate thread.</summary>
            
             <param name="evts">Event list.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.SendEvents">
            <summary>
            Deliver notification events from the queue to the topology listeners.</summary>
        </member>
        <member name="T:GridGain.Client.Impl.GridClientTopology.TopologyEvent">
            <summary>Event for node adding and removal.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTopology.TopologyEvent.#ctor(System.Boolean,GridGain.Client.IGridClientNode)">
             <summary>
             Creates a new event.</summary>
            
             <param name="added">If <c>true</c>, indicates that node was added to topology.</param>
                  If <c>false</c>, indicates that node was removed.
             <param name="node">Added or removed node.</param>
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology.TopologyEvent.Added">
            <summary>Added or removed flag</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTopology.TopologyEvent.Node">
            <summary>Node that triggered event.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.GridClientConnectionIdleClosedException">
            <summary>
            This exception is thrown if client was closed by idle checker thread. This exception should be
            handled internally and never rethrown to user.</summary>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionIdleClosedException.#ctor">
            <summary>Constructs an exception.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionIdleClosedException.#ctor(System.String)">
             <summary>
             Creates exception with error message.</summary>
            
             <param name="msg">Error message.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionIdleClosedException.#ctor(System.String,System.Exception)">
             <summary>
             Creates an exception with given message and error cause.</summary>
            
             <param name="msg">Exception message.</param>
             <param name="cause">Exception cause.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientConnectionIdleClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Constructs an exception.</summary>
            
             <param name="info">Serialization info.</param>
             <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:GridGain.Client.Impl.GridClientHttpConnection">
            <summary>Java client implementation.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientHttpConnection.busyLock">
            <summary>Busy lock for graceful close.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientHttpConnection.pendingReqs">
            <summary>Pending requests.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientHttpConnection.closed">
            <summary>Closed flag.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientHttpConnection.sessionToken">
            <summary>Session token.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientHttpConnection.reqIdCntr">
            <summary>Request ID counter (should be modified only with Interlocked class).</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.#ctor(System.Guid,System.Net.IPEndPoint,GridGain.Client.Ssl.IGridClientSslContext,System.Object,GridGain.Client.Impl.GridClientTopology)">
                     * <summary>
                     * Creates HTTP client connection.</summary>
            
                     * <param name="clientId">Client identifier.</param>
                     * <param name="srvAddr">Server address on which HTTP REST handler resides.</param>
                     * <param name="sslCtx">SSL context to use if SSL is enabled, <c>null</c> otherwise.</param>
                     * <param name="credentials">Client credentials.</param>
                     * <param name="top">Topology to use.</param>
                     * <exception cref="T:System.IO.IOException">If input-output exception occurs.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.Close(System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CloseIfIdle(System.TimeSpan)">
             <summary>
             Closes client only if there are no pending requests in map.</summary>
            
             <returns>Idle timeout.</returns>
             <returns><c>True</c> if client was closed.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.MakeJettyRequest``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Object,``0})">
             <summary>
             Creates new future and passes it to the MakeJettyRequest.</summary>
            
             <param name="args">Request parameters.</param>
             <param name="converter">Response converter to pass into generated future.</param>
             <returns>Future.</returns>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was manually closed.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.BuildRequestString(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
             <summary>
             Builds request string with given parameters.</summary>
            
             <param name="args">Request parameters.</param>
             <param name="sessionToken">Session token.</param>
             <returns>Request string in URL format.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.OnResponse(System.Collections.Generic.IDictionary{System.String,System.Object},GridGain.Client.Util.GridClientFuture,System.String)">
             <summary>
             Handle server response.</summary>
            
             <param name="args">Parameters map.</param>
             <param name="fut">Future to use.</param>
             <param name="str">Downloaded string response.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CachePutAll``2(System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CacheGet``2(System.String,``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CacheGetAll``2(System.String,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CacheRemove``1(System.String,``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CacheRemoveAll``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CacheAdd``2(System.String,``0,``1)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CacheReplace``2(System.String,``0,``1)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CacheCompareAndSet``2(System.String,``0,``1,``1)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.CacheMetrics``1(System.String,``0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.Execute``1(System.String,System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.Node(System.Guid,System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.Node(System.String,System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.Node(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
             <summary>
             Requests for the node.</summary>
            
             <param name="args">Request parameters.</param>
             <param name="includeAttrs">Whether to include attributes.</param>
             <param name="includeMetrics">Whether to include metrics.</param>
             <returns>Node.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.Topology(System.Boolean,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.Log(System.String,System.Int32,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.JsonBeanToNode(System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
             Creates client node impl from json object representation.</summary>
            
             <param name="json">JSONObject (possibly JSONNull).</param>
             <returns>Converted client node.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.AsList``1(System.Object)">
             <summary>
             Convert json object to list.</summary>
            
             <param name="json">Json object to convert.</param>
             <returns>Resulting list.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.AsMap``2(System.Object)">
             <summary>
             Convert json object to map.</summary>
            
             <param name="json">Json object to convert.</param>
             <returns>Resulting map.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientHttpConnection.AsMap``2(System.Object,System.Func{System.Object,``1})">
             <summary>
             Convert json object to list.</summary>
            
             <param name="json">Json object to convert.</param>
             <param name="cast">Casting callback for each value in the resulting map.</param>
             <returns>Resulting map.</returns>
        </member>
        <member name="T:GridGain.Client.Impl.GridClientTcpConnection">
            <summary>
            This class performs request to grid over tcp protocol. Serialization is performed
            with marshaller provided.</summary>
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.PING_PACKET">
            <summary>Ping packet.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.PING_SND_TIME">
            <summary>Ping is sent every 3 seconds.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.PING_RES_TIMEOUT">
            <summary>Connection is considered to be half-opened if server did not respond to ping in 7 seconds.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.SOCK_READ_TIMEOUT">
            <summary>Socket read timeout.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.reqIdCntr">
            <summary>Request ID counter (should be modified only with Interlocked class).</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.pendingReqs">
            <summary>Requests that are waiting for response. Guarded by intrinsic lock.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.refreshNodeReqs">
            <summary>Node by node id requests. Map for reducing server load.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.sesTok">
            <summary>Authenticated session token.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.closeLock">
            <summary>Lock for graceful shutdown.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.closed">
            <summary>Closed flag.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.closedIdle">
            <summary>Closed by idle request flag.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.waitCompletion">
            <summary>Reader thread management flag to wait completion on connection closing.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.marshaller">
            <summary>Message marshaller</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.tcp">
            <summary>Underlying tcp client.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.stream">
            <summary>Output stream.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.lastPacketSndTime">
            <summary>Timestamp of last packet send event.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.lastPacketRcvTime">
            <summary>Timestamp of last packet receive event.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.lastPingSndTime">
            <summary>Ping send time. (reader thread only).</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.lastPingRcvTime">
            <summary>Ping receive time (reader thread only).</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.GridClientTcpConnection.rdr">
            <summary>Reader thread.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.#ctor(System.Guid,System.Net.IPEndPoint,GridGain.Client.Ssl.IGridClientSslContext,System.Int32,GridGain.Client.Impl.Marshaller.IGridClientMarshaller,System.Object,GridGain.Client.Impl.GridClientTopology)">
             <summary>
             Creates a client facade, tries to connect to remote server, in case
             of success starts reader thread.</summary>
            
             <param name="clientId">Client identifier.</param>
             <param name="srvAddr">Server to connect to.</param>
             <param name="sslCtx">SSL context to use if SSL is enabled, <c>null</c> otherwise.</param>
             <param name="connectTimeout">Connect timeout.</param>
             <param name="marshaller">Marshaller to use in communication.</param>
             <param name="credentials">Client credentials.</param>
             <param name="top">Topology instance.</param>
             <exception cref="T:System.IO.IOException">If connection could not be established.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.Close(System.Boolean)">
             <summary>
             Closes this client. No methods of this class can be used after this method was called.
             Any attempt to perform request on closed client will case <see ctype="GridClientConnectionResetException"/>.
             All pending requests are failed without waiting for response.</summary>
            
             <param name="waitCompletion">If <c>true</c> this method will wait for all pending requests to be completed.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CloseIfIdle(System.TimeSpan)">
             <summary>
             Closes client only if there are no pending requests in map.</summary>
            
             <returns>Idle timeout.</returns>
             <returns><c>True</c> if client was closed.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.shutdown">
            <summary>Closes all resources and fails all pending requests.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.lastNetworkActivityTimestamp">
             <summary>
             </summary>
            
             <returns>Last network activity for this connection.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.makeRequest``1(GridGain.Client.Impl.Message.GridClientRequest)">
             <summary>
             Makes request to server via tcp protocol and returns a future that will be completed when
             response is received.</summary>
            
             <param name="msg">Message to request,</param>
             <returns>Response object.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">If request failed.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.makeRequest``1(GridGain.Client.Impl.Message.GridClientRequest,GridGain.Client.Util.GridClientFuture{``0})">
             <summary>
             Makes request to server via tcp protocol and returns a future
             that will be completed when response is received.</summary>
            
             <param name="msg">Message to request,</param>
             <param name="fut">Future that will handle response.</param>
             <returns>Response object.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">If request failed.</exception>
             <exception cref="T:GridGain.Client.GridClientClosedException">If client was closed.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.handleResponse(GridGain.Client.Impl.Message.GridClientResponse)">
             <summary>
             Handles incoming response message.</summary>
            
             <param name="msg">Incoming response message.</param>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.sendPacket(GridGain.Client.Impl.Message.GridClientRequest)">
             <summary>
             Tries to send packet over network.</summary>
            
             <param name="msg">Message being sent.</param>
             <exception cref="T:System.IO.IOException">If client was closed before message was sent over network.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.authenticate(System.Object)">
             <summary>
             Authenticate this client with passed credentials.</summary>
            
             <param name="creds">Authentication credentials.</param>
             <exception cref="T:GridGain.Client.GridClientAuthenticationException">In authentication fails.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CachePutAll``2(System.String,System.Collections.Generic.IDictionary{``0,``1})">
            
             <param name="cacheName">Cache name.</param>
             <param name="entries">Entries.</param>
             <returns><c>True</c> if map contained more then one entry or if put succeeded in case of one entry,</returns>
                  <c>false</c> otherwise
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CacheGetAll``2(System.String,System.Collections.Generic.IEnumerable{``0})">
            
             <param name="cacheName">Cache name.</param>
             <param name="keys">Keys.</param>
             <returns>Entries.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CacheRemove``1(System.String,``0)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <returns>Whether entry was actually removed.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CacheRemoveAll``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            
             <param name="cacheName">Cache name.</param>
             <param name="keys">Keys.</param>
             <returns>Whether entries were actually removed</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CacheAdd``2(System.String,``0,``1)">
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <param name="val">Value.</param>
             <returns>Whether entry was added.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CacheReplace``2(System.String,``0,``1)">
             <summary>
             Replace value in cache.</summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <param name="val">Value.</param>
             <returns>Whether value was actually replaced.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CacheCompareAndSet``2(System.String,``0,``1,``1)">
             <summary>
             </summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <param name="val1">Value 1.</param>
             <param name="val2">Value 2.</param>
             <returns>Whether new value was actually set.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.CacheMetrics``1(System.String,``0)">
             <summary>
             Requests metrics for specified key in the cache.</summary>
            
             <param name="cacheName">Cache name.</param>
             <param name="key">Key.</param>
             <returns>Key metrics in cache.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.Execute``1(System.String,System.Object)">
             <summary>
             Requests task execution with specified name.</summary>
            
             <param name="taskName">Task name.</param>
             <param name="arg">Task argument.</param>
             <returns>Task execution result.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.futureNodeConverter(System.Object)">
             <summary>
             Convert response data into grid node bean.</summary>
            
             <param name="o">Response bean to convert into grid node.</param>
             <returns>Converted grid node.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.Node(System.Guid,System.Boolean,System.Boolean)">
             <summary>
             Requests node by its ID.</summary>
            
             <param name="id">Node ID.</param>
             <param name="includeAttrs">Whether to include attributes.</param>
             <param name="includeMetrics">Whether to include metrics.</param>
             <returns>Node.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.Node(System.String,System.Boolean,System.Boolean)">
             <summary>
             Requests node by its IP address.</summary>
            
             <param name="ipAddr">IP address.</param>
             <param name="includeAttrs">Whether to include attributes.</param>
             <param name="includeMetrics">Whether to include metrics.</param>
             <returns>Node.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.Topology(System.Boolean,System.Boolean)">
             <summary>
             Requests actual grid topology.</summary>
            
             <param name="includeAttrs">Whether to include attributes.</param>
             <param name="includeMetrics">Whether to include metrics.</param>
             <returns>Nodes.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.Log(System.String,System.Int32,System.Int32)">
             <summary>
             Requests server log entries in specified scope.</summary>
            
             <param name="path">Log file path.</param>
             <param name="fromLine">Index of start line that should be retrieved.</param>
             <param name="toLine">Index of end line that should be retrieved.</param>
             <returns>Log file contents.</returns>
             <exception cref="T:GridGain.Client.Impl.GridClientConnectionResetException">In case of error.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.nodeBeanToNode(GridGain.Client.Impl.Message.GridClientNodeBean)">
             <summary>
             Creates client node instance from message.</summary>
            
             <param name="nodeBean">Node bean message.</param>
             <returns>Created node.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.readPackets">
            <summary>Reader thread.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.readByte">
             <summary>
             Reads a byte from the stream.</summary>
            
             <returns>The byte from the stream or -1 input stream ends.</returns>
             <exception cref="T:System.TimeoutException">If read socket operation is timed out.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.GridClientTcpConnection.checkPing">
             <summary>
             Checks last ping send time and last ping receive time.</summary>
            
             <exception cref="T:System.IO.IOException">If</exception>
        </member>
        <member name="T:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter">
            <summary>
            Client messages converter from protobuf format to grid client's one.</summary>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapGuid(Google.ProtocolBuffers.ByteString)">
             <summary>
             Converts byte array into Guid.</summary>
            
             <param name="id">Guid to convert.</param>
             <returns>Converted Guid.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapMap(GridGain.Client.Impl.Protobuf.Map)">
             <summary>
             Converts protocol message into map.</summary>
            
             <param name="map">Protocol message map to convert.</param>
             <returns>Converted map.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapMap``2(GridGain.Client.Impl.Protobuf.Map)">
             <summary>
             Converts protocol message into map.</summary>
            
             <param name="map">Protocol message map to convert.</param>
             <returns>Converted map.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapCollection(GridGain.Client.Impl.Protobuf.Collection)">
             <summary>
             Converts collection to the list of values.</summary>
            
             <param name="col">Collection to convert.</param>
             <returns>Collection of the values.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapObject``1(GridGain.Client.Impl.Protobuf.ObjectWrapper)">
             <summary>
             Converts protocol object into java object.</summary>
            
             <param name="obj">Protocol message object to convert.</param>
             <returns>Recovered object.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapObject(GridGain.Client.Impl.Protobuf.ObjectWrapper)">
             <summary>
             Converts protocol object into object.</summary>
            
             <param name="val">Protocol message object to convert into value.</param>
             <returns>Recovered object.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapNode(GridGain.Client.Impl.Protobuf.ProtoNodeBean)">
             <summary>
             Converts node bean to protocol message.</summary>
            
             <param name="node">Node bean to convert.</param>
             <returns>Converted message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapMetrics(GridGain.Client.Impl.Protobuf.ProtoNodeMetricsBean)">
             <summary>
             Converts metrics bean to protocol message.</summary>
            
             <param name="m">Protocol message metrics to convert.</param>
             <returns>Converted metrics bean.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapTaskResult(GridGain.Client.Impl.Protobuf.ProtoTaskBean)">
             <summary>
             Unwraps protocol message to a task result bean.</summary>
            
             <param name="bean">Protocol message to unwrap.</param>
             <returns>Unwrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapRequest``1(``0,GridGain.Client.Impl.Protobuf.ProtoRequest)">
             <summary>
             Wraps any request into a protocol message.</summary>
            
             <param name="req">Request service information (headers).</param>
             <param name="bean">Data bean to send.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapAuthRequest(GridGain.Client.Impl.Protobuf.ProtoRequest)">
             <summary>
             Wraps authentication request into a protocol message.</summary>
            
             <param name="req">Authentication request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapCacheRequest(GridGain.Client.Impl.Protobuf.ProtoRequest)">
             <summary>
             Wraps cache request into a protocol message.</summary>
            
             <param name="req">Cache request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapLogRequest(GridGain.Client.Impl.Protobuf.ProtoRequest)">
             <summary>
             Wraps log request into a protocol message.</summary>
            
             <param name="req">Log request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapTaskRequest(GridGain.Client.Impl.Protobuf.ProtoRequest)">
             <summary>
             Wraps task request into a protocol message.</summary>
            
             <param name="req">Task request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapTopologyRequest(GridGain.Client.Impl.Protobuf.ProtoRequest)">
             <summary>
             Wraps topology request into a protocol message.</summary>
            
             <param name="req">Topology request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufBackConverter.WrapResponse(GridGain.Client.Impl.Protobuf.ProtoResponse)">
             <summary>
             Wraps protocol message into a results bean.</summary>
            
             <param name="data">Protocol message that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="T:GridGain.Client.Impl.Marshaller.IGridClientMarshaller">
            <summary>Marshaller for binary protocol messages.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.IGridClientMarshaller.Marshal(System.Object)">
             <summary>
             Marshals object to byte array.</summary>
            
             <param name="val">Object to marshal.</param>
             <returns>Byte array.</returns>
             <exception cref="T:System.IO.IOException">If marshalling failed.</exception>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.IGridClientMarshaller.Unmarshal``1(System.Byte[])">
             <summary>
             Unmarshalls object from byte array.</summary>
            
             <param name="data">Byte array.</param>
             <returns>Unmarshalled object.</returns>
             <exception cref="T:System.IO.IOException">If unmarshalling failed.</exception>
        </member>
        <member name="T:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter">
            <summary>Client messages converter from grid client's format to protobuf one.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapGuid(System.Guid)">
             <summary>
             Converts Guid to a byte array.</summary>
            
             <param name="id">Guid to convert.</param>
             <returns>Converted bytes.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapEntry(System.Object,System.Object)">
             <summary>
             Converts map entry to a key-value pair.</summary>
            
             <param name="key">Map entry key.</param>
             <param name="val">Map entry value.</param>
             <returns>Key-value pair.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapMap(System.Collections.IDictionary)">
             <summary>
             Converts map into protocol message.</summary>
            
             <param name="map">Map to convert.</param>
             <returns>Protocol message map.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapMap``2(System.Collections.Generic.IDictionary{``0,``1})">
             <summary>
             Converts map into protocol message.</summary>
            
             <param name="map">Map to convert.</param>
             <returns>Protocol message map.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapCollection(System.Collections.IEnumerable)">
             <summary>
             Converts collection to the list of values.</summary>
            
             <param name="col">Collection to convert.</param>
             <returns>Collection of the values.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapObject(System.Object)">
             <summary>
             Converts java object to a protocol-understandable format.</summary>
            
             <param name="val">Value to convert.</param>
             <returns>Wrapped protocol message object.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapNode(GridGain.Client.Impl.Message.GridClientNodeBean)">
             <summary>
             Converts node bean to protocol message.</summary>
            
             <param name="node">Node bean to convert.</param>
             <returns>Converted message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapMetrics(System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
             Converts metrics bean to protocol message.</summary>
            
             <param name="m">Metrics bean to convert.</param>
             <returns>Converted message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapTaskResult(GridGain.Client.Impl.Message.GridClientTaskResultBean)">
             <summary>
             Wraps task result bean into a protocol message.</summary>
            
             <param name="bean">Task result that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapRequest(GridGain.Client.Impl.Message.GridClientRequest,Google.ProtocolBuffers.IMessage)">
             <summary>
             Wraps any request into a protocol message.</summary>
            
             <param name="req">Request service information (headers).</param>
             <param name="bean">Data bean to send.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapAuthRequest(GridGain.Client.Impl.Message.GridClientAuthenticationRequest)">
             <summary>
             Wraps authentication request into a protocol message.</summary>
            
             <param name="req">Authentication request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapCacheRequest(GridGain.Client.Impl.Message.GridClientCacheRequest)">
             <summary>
             Wraps cache request into a protocol message.</summary>
            
             <param name="req">Cache request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapLogRequest(GridGain.Client.Impl.Message.GridClientLogRequest)">
             <summary>
             Wraps log request into a protocol message.</summary>
            
             <param name="req">Log request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapTaskRequest(GridGain.Client.Impl.Message.GridClientTaskRequest)">
             <summary>
             Wraps task request into a protocol message.</summary>
            
             <param name="req">Task request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapTopologyRequest(GridGain.Client.Impl.Message.GridClientTopologyRequest)">
             <summary>
             Wraps topology request into a protocol message.</summary>
            
             <param name="req">Topology request that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufConverter.WrapResultBean(GridGain.Client.Impl.Message.GridClientResponse)">
             <summary>
             Wraps results bean into a protocol message.</summary>
            
             <param name="bean">Results bean that need to be wrapped.</param>
             <returns>Wrapped message.</returns>
        </member>
        <member name="T:GridGain.Client.Impl.Marshaller.GridClientProtobufMarshaller">
            <summary>Client messages marshaller based on protocol buffers compiled code.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufMarshaller.Marshal(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Impl.Marshaller.GridClientProtobufMarshaller.Unmarshal``1(System.Byte[])">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientResponseStatus">
            <summary>Response status codes.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientResponseStatus.Success">
            <summary>Command succeeded.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientResponseStatus.Failed">
            <summary>Command failed.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientResponseStatus.AuthFailure">
            <summary>Authentication failure.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientCacheRequestOperation">
            <summary>Available cache operations.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.Put">
            <summary>Cache put.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.PutAll">
            <summary>Cache put all.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.Get">
            <summary>Cache get.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.GetAll">
            <summary>Cache get all.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.Rmv">
            <summary>Cache remove.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.RmvAll">
            <summary>Cache remove all.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.Add">
            <summary>Cache add (put only if not exists).</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.Replace">
            <summary>Cache replace (put only if exists).</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.Cas">
            <summary>Cache compare and set.</summary> 
        </member>
        <member name="F:GridGain.Client.Impl.Message.GridClientCacheRequestOperation.Metrics">
            <summary>Cache metrics request.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientRequest">
            <summary>
            This class provides implementation for commit message fields
            and cannot be used directly.</summary>
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientRequest.RequestId">
            <summary>Request id.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientRequest.ClientId">
            <summary>Client id.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientRequest.SessionToken">
            <summary>Client session token.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientAuthenticationRequest">
            <summary>Client authentication request.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientAuthenticationRequest.Credentials">
            <summary>Credentials object.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientCacheRequest">
            <summary>Generic cache request.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.Message.GridClientCacheRequest.FindByCode(System.Int32)">
             <summary>
             Tries to find enum value by operation code.</summary>
            
             <param name="val">Operation code value.</param>
             <returns>Enum value.</returns>
        </member>
        <member name="M:GridGain.Client.Impl.Message.GridClientCacheRequest.#ctor(GridGain.Client.Impl.Message.GridClientCacheRequestOperation)">
             <summary>
             Creates grid cache request.</summary>
            
             <param name="op">Requested operation.</param>
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientCacheRequest.Operation">
            <summary>Requested cache operation.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientCacheRequest.CacheName">
            <summary>Cache name.</summary>
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientCacheRequest.Key">
            <summary>Key.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientCacheRequest.Value">
            <summary>Value (expected value for CAS).</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientCacheRequest.Value2">
            <summary>New value for CAS.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientCacheRequest.Values">
            <summary>Keys and values for put all, get all, remove all operations.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientCacheRequest.Keys">
            <summary>Keys collection.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientLogRequest">
            <summary>Request for a log file.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.Message.GridClientLogRequest.#ctor">
            <summary>Constructs log request.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientLogRequest.Path">
            <summary>Path to log file.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientLogRequest.From">
            <summary>From line, inclusive, indexing from 0.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientLogRequest.To">
            <summary>To line, inclusive, indexing from 0, can exceed count of lines in log.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientNodeBean">
            <summary>Node bean.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.Message.GridClientNodeBean.#ctor">
            <summary>Constructs client node bean.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientNodeBean.NodeId">
            <summary>Node ID.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientNodeBean.InternalAddresses">
            <summary>Internal addresses.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientNodeBean.ExternalAddresses">
            <summary>External addresses.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientNodeBean.Metrics">
            <summary>Gets metrics.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientNodeBean.Attributes">
            <summary>Attributes.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientNodeBean.TcpPort">
            <summary>REST binary protocol port.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientNodeBean.JettyPort">
            <summary>REST http protocol port.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientNodeBean.Caches">
            <summary>
            Configured node caches - the map where key is cache name
            and value is cache mode ("LOCAL", "REPLICATED", "PARTITIONED").</summary>
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientPingRequest">
            <summary>Fictive ping packet.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientResponse">
            <summary>Bean representing client operation result.</summary> 
        </member>
        <member name="M:GridGain.Client.Impl.Message.GridClientResponse.FindByCode(System.Int32)">
             <summary>
             Tries to find enum value by operation code.</summary>
            
             <param name="val">Operation code value.</param>
             <returns>Enum value.</returns>
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientResponse.Status">
            <summary>
            Response status code.</summary>
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientResponse.ErrorMessage">
            <summary>
            Error message, if any error occurred, or <c>null</c>.</summary>
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientResponse.Result">
            <summary>
            Result object.</summary>
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientTaskRequest">
            <summary><c>Task</c> command request.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTaskRequest.TaskName">
            <summary>Task name.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTaskRequest.Argument">
            <summary>Task argument.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientTaskResultBean">
            <summary>Task result.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTaskResultBean.TaskId">
            <summary>Synthetic ID containing task ID and result holding node ID.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTaskResultBean.IsFinished">
            <summary>Execution finished flag.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTaskResultBean.Result">
            <summary>Task result.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTaskResultBean.Error">
            <summary>Error if any occurs while execution.</summary> 
        </member>
        <member name="T:GridGain.Client.Impl.Message.GridClientTopologyRequest">
            <summary><c>Topology</c> command request.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTopologyRequest.IncludeMetrics">
            <summary>Include metrics flag.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTopologyRequest.IncludeAttributes">
            <summary>Include node attributes flag.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTopologyRequest.NodeId">
            <summary>Id of requested node if specified, <c>null</c> otherwise.</summary> 
        </member>
        <member name="P:GridGain.Client.Impl.Message.GridClientTopologyRequest.NodeIP">
            <summary>IP address of requested node if specified, <c>null</c> otherwise.</summary> 
        </member>
        <member name="T:GridGain.Client.Ssl.GridClientSslContext">
            <summary>
            This class provides basic initialization of the SSL stream for
            client-server communication.</summary>
        </member>
        <member name="T:GridGain.Client.Ssl.IGridClientSslContext">
            <summary>This interface provides initialization of the SSL client-server communication.</summary> 
        </member>
        <member name="M:GridGain.Client.Ssl.IGridClientSslContext.CreateStream(System.Net.Sockets.TcpClient)">
             <summary>
             Constructs SSL stream for the client.</summary>
            
             <param name="client">Tcp client for client-server communication.</param>
             <returns>Configured SSL stream.</returns>
        </member>
        <member name="F:GridGain.Client.Ssl.GridClientSslContext.AllowAllCerts">
            <summary>Allow all server certificates callback.</summary> 
        </member>
        <member name="F:GridGain.Client.Ssl.GridClientSslContext.DenyAllCerts">
            <summary>Deny all server certificates callback.</summary> 
        </member>
        <member name="F:GridGain.Client.Ssl.GridClientSslContext.callback">
            <summary>Validate certificates chain user-defined callback.</summary> 
        </member>
        <member name="M:GridGain.Client.Ssl.GridClientSslContext.#ctor">
            <summary>Constructs default context, which ignores any SSL errors.</summary> 
        </member>
        <member name="M:GridGain.Client.Ssl.GridClientSslContext.#ctor(System.Boolean)">
             <summary>
             Constructs SSL context with permanent validation result.</summary>
            
             <param name="permanentResult">Permanent validation result: allow all certificates or deny all.</param>
        </member>
        <member name="M:GridGain.Client.Ssl.GridClientSslContext.CreateStream(System.Net.Sockets.TcpClient)">
             <summary>
             Constructs SSL stream for the client.</summary>
            
             <param name="client">Tcp client for client-server communication.</param>
             <returns>Configured SSL stream.</returns>
        </member>
        <member name="P:GridGain.Client.Ssl.GridClientSslContext.ValidateCallback">
            <summary>Validate certificates chain user-defined callback.</summary> 
        </member>
        <member name="T:GridGain.Client.Hasher.GridClientMD5Hasher">
            <summary>MD5 based hasher function.</summary> 
        </member>
        <member name="T:GridGain.Client.Hasher.IGridClientHasher">
            <summary>Interface for pluggable hasher functions.</summary> 
        </member>
        <member name="M:GridGain.Client.Hasher.IGridClientHasher.Hash(System.Byte[])">
             <summary>
             Produces hash code for a given binary data.</summary>
            
             <param name="data">Binary data to hash.</param>
             <returns>Hash code for the binary data.</returns>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientMD5Hasher.Hash(System.Byte[])">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientMD5Hasher.ToString">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.Hasher.GridClientMurMur2Hasher">
            <summary>
            Murmur2 hasher function based on endian-neutral implementation.
            For more information refer to <a href="http://sites.google.com/site/murmurhash/">MurmurHash</a> website.
            </summary>
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientMurMur2Hasher.M">
            <summary>M.</summary> 
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientMurMur2Hasher.R">
            <summary>R.</summary> 
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientMurMur2Hasher.seed">
            <summary>Seed.</summary> 
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientMurMur2Hasher.Hash(System.Byte[])">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientMurMur2Hasher.ToString">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.Util.GridClientNullDictionary`2">
            <summary>Null-key allowed dictionary.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientNullDictionary`2.NULL">
            <summary>Null value.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientNullDictionary`2.inner">
            <summary>Inner delagate for not-null keys.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientNullDictionary`2.nullKey">
            <summary>Flag to mark this map contains null key.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientNullDictionary`2.nullValue">
            <summary>Value in the map by the null key.</summary> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.#ctor">
            <summary>Constructs empty null-key allowed dictionary.</summary> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
             <summary>
             Constructs null-key allowed dictionary based on the passed one.</summary>
            
             <param name="inner">Map to wrap with this one.</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.Add(`0,`1)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.ContainsKey(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.Remove(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.Clear">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.sc::System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.GetHashCode">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.Equals(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.Equals(`1,`1)">
             <summary>
             Compare arguments for equals.</summary>
            
             <param name="v1">Object #1.</param>
             <param name="v2">Object #2.</param>
             <returns><c>true</c> if objects are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:GridGain.Client.Util.GridClientNullDictionary`2.Keys">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientNullDictionary`2.Values">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientNullDictionary`2.Item(`0)">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientNullDictionary`2.Count">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientNullDictionary`2.IsReadOnly">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator">
            <summary>Enumerator for the null-key dictionary.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.inner">
            <summary>Wrapped enumerator.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.nullValue">
            <summary>Key-value pair for the null-key, always present.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.position">
            <summary>Initial pointer position.</summary> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.#ctor(System.Collections.Generic.IDictionary{`0,`1},`1)">
             <summary>
             Constructs enumerator for the null-key dictionary.</summary>
            
             <param name="map">Wrapped map.</param>
             <param name="nullValue">Value for the null key, always present.</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.MoveNext">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.Reset">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.Dispose">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.Current">
            <inheritdoc /> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientNullDictionary`2.NullEnumerator.sc::System#Collections#IEnumerator#Current">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.Hasher.GridClientSha1Hasher">
            <summary>
            SHA-1 based hasher function.</summary>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientSha1Hasher.Hash(System.Byte[])">
            <inheritdoc /> 
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientSha1Hasher.ToString">
            <inheritdoc /> 
        </member>
        <member name="T:GridGain.Client.Hasher.GridClientConsistentHash">
             <summary>
             Controls key to node affinity using consistent hash algorithm. This class is thread-safe
             and does not have to be externally synchronized.</summary>
            
             <remarks>
             For a good explanation of what consistent hashing is, you can refer to
             <a href="http://weblogs.java.net/blog/tomwhite/archive/2007/11/consistent_hash.html">Tom White's Blog</a>.
             </remarks>
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientConsistentHash.Prime">
            <summary>Prime number.</summary> 
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientConsistentHash.Null">
            <summary>Null value.</summary> 
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash.#ctor">
            <summary>
            Constructs client consistent hash. Deny public construction of this class.</summary>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash.ToHashBytes(System.Object)">
             <summary>
             Converts an object into byte array for hashing.</summary>
            
             <param name="val">Value to get hash bytes for.</param>
             <returns>Byte array for hashing.</returns>
        </member>
        <member name="T:GridGain.Client.Hasher.GridClientConsistentHash`1">
             <summary>
             Controls key to node affinity using consistent hash algorithm. This class is thread-safe
             and does not have to be externally synchronized.</summary>
            
             <remarks>
             For a good explanation of what consistent hashing is, you can refer to
             <a href="http://weblogs.java.net/blog/tomwhite/archive/2007/11/consistent_hash.html">Tom White's Blog</a>.
             </remarks>
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientConsistentHash`1.Rnd">
            <summary>Random generator.</summary> 
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientConsistentHash`1.affSeed">
            <summary>Affinity seed.</summary> 
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientConsistentHash`1.hasher">
            <summary>Hasher function.</summary> 
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientConsistentHash`1.circle">
            <summary>Map of hash assignments.</summary> 
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientConsistentHash`1.rw">
            <summary>Read/write lock.</summary> 
        </member>
        <member name="F:GridGain.Client.Hasher.GridClientConsistentHash`1.nodes">
            <summary>Distinct nodes in the hash.</summary> 
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.#ctor">
            <summary>
            Constructs consistent hash using empty affinity seed and <c>MD5</c> hasher function.</summary>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.#ctor(System.Object)">
             <summary>
             Constructs consistent hash using given affinity seed and <c>MD5</c> hasher function.</summary>
            
             <param name="affSeed">Affinity seed (will be used as key prefix for hashing).</param>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.#ctor(GridGain.Client.Hasher.IGridClientHasher)">
             <summary>
             Constructs consistent hash using given hasher function.</summary>
            
             <param name="hasher">Hasher function to use for generation of uniformly distributed hashes.</param>
                  If <c>null</c>, then <c>null</c> hashing is used.
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.#ctor(System.Object,GridGain.Client.Hasher.IGridClientHasher)">
             <summary>
             Constructs consistent hash using given affinity seed and hasher function.</summary>
            
             <param name="affSeed">Affinity seed (will be used as key prefix for hashing).</param>
             <param name="hasher">Hasher function to use for generation of uniformly distributed hashes.</param>
                  If <c>null</c>, then <c>null</c> hashing is used.
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.AddNodes(System.Collections.Generic.ICollection{`0},System.Int32)">
             <summary>
             Adds nodes to consistent hash algorithm (if nodes are <c>null</c> or empty, then no-op).</summary>
            
             <param name="nodes">Nodes to add.</param>
             <param name="replicas">Number of replicas for every node.</param>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.FindCircleKey(`0)">
             <summary>
             Find key for node in the circle.</summary>
            
             <param name="node">Node to get key in the circle for.</param>
             <returns>Key in the circle for specified node or -1 if such node not found.</returns>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.AddNode(`0,System.Int32)">
             <summary>
             Adds a node to consistent hash algorithm.</summary>
            
             <param name="node">New node (if <c>null</c> then no-op).</param>
             <param name="replicas">Number of replicas for the node.</param>
             <returns><c>True</c> if node was added, <c>null</c> if it is <c>null</c> or</returns>
                  is already contained in the hash.
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.RemoveNode(`0)">
             <summary>
             Removes a node and all of its replicas.</summary>
            
             <param name="node">Node to remove (if <c>null</c>, then no-op).</param>
             <returns><c>True</c> if node was removed, <c>True</c> if node is <c>True</c> or</returns>
                  not present in hash.
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.Node(System.Object)">
             <summary>
             Gets node for a key.</summary>
            
             <param name="key">Key.</param>
             <returns>Node.</returns>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.Node(System.Object,System.Collections.Generic.ICollection{`0})">
             <summary>
             Gets node for a given key.</summary>
            
             <param name="key">Key to get node for.</param>
             <param name="inc">Optional inclusion set. Only nodes contained in this set may be returned.</param>
                  If <c>null</c>, then all nodes may be included.
             <returns>Node for key, or <c>null</c> if node was not found.</returns>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.Node(System.Object,System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`0})">
             <summary>
             Gets node for a given key.</summary>
            
             <param name="key">Key to get node for.</param>
             <param name="inc">Optional inclusion set. Only nodes contained in this set may be returned.</param>
                  If <c>null</c>, then all nodes may be included.
             <param name="exc">Optional exclusion set. Only nodes not contained in this set may be returned.</param>
                  If <c>null</c>, then all nodes may be returned.
             <returns>Node for key, or <c>null</c> if node was not found.</returns>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.Node(System.Object,System.Predicate{`0})">
             <summary>
             Gets node for a given key.</summary>
            
             <param name="key">Key to get node for.</param>
             <param name="filter">Optional predicate for node filtering.</param>
             <returns>Node for key, or <c>null</c> if node was not found.</returns>
        </member>
        <member name="M:GridGain.Client.Hasher.GridClientConsistentHash`1.GetHash(System.Object)">
             <summary>
             Gets hash code for a given object.</summary>
            
             <param name="val">Value to get hash code for.</param>
             <returns>Hash code.</returns>
        </member>
        <member name="P:GridGain.Client.Hasher.GridClientConsistentHash`1.Count">
             <summary>
             Gets number of distinct nodes, excluding replicas, in consistent hash.</summary>
            
             <returns>Number of distinct nodes, excluding replicas, in consistent hash.</returns>
        </member>
        <member name="P:GridGain.Client.Hasher.GridClientConsistentHash`1.Size">
             <summary>
             Gets size of all nodes (including replicas) in consistent hash.</summary>
            
             <returns>Size of all nodes (including replicas) in consistent hash.</returns>
        </member>
        <member name="P:GridGain.Client.Hasher.GridClientConsistentHash`1.IsEmpty">
             <summary>
             Checks if consistent hash has nodes added to it.</summary>
            
             <returns><c>True</c> if consistent hash is empty, <c>null</c> otherwise.</returns>
        </member>
        <member name="P:GridGain.Client.Hasher.GridClientConsistentHash`1.Random">
             <summary>
             Picks a random node from consistent hash.</summary>
            
             <returns>Random node from consistent hash or <c>null</c> if there are no nodes.</returns>
        </member>
        <member name="P:GridGain.Client.Hasher.GridClientConsistentHash`1.Nodes">
             <summary>
             Gets set of all distinct nodes in the consistent hash (in no particular order).</summary>
            
             <returns>Set of all distinct nodes in the consistent hash.</returns>
        </member>
        <member name="T:GridGain.Client.Util.GridClientUtils">
            <summary>Java client utils.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientUtils.GUID_CONV">
            <summary>Conversion from Java UUID format into C# Guid.</summary> 
        </member>
        <member name="F:GridGain.Client.Util.GridClientUtils.asyncThreadsCounter">
            <summary>Background task execution threads counter.</summary> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToBytes(System.Guid)">
             <summary>
             Converts Guid to a bytes array in Java format.</summary>
            
             <param name="id">Guid to convert.</param>
             <returns>Converted Guid bytes in Java format.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.BytesToGuid(System.Byte[])">
             <summary>
             Converts bytes array representation of Java UUID into C# Guid.</summary>
            
             <param name="java">Java UUID as bytes array.</param>
             <returns>C# Guid.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToBytes(System.Int16)">
             <summary>
             Converts primitive <c>short</c> type to byte array.</summary>
            
             <param name="val">Short value.</param>
             <returns>Array of bytes.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToBytes(System.Int32)">
             <summary>
             Converts primitive <c>int</c> type to byte array.</summary>
            
             <param name="val">Integer value.</param>
             <returns>Array of bytes.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToBytes(System.Int64)">
             <summary>
             Converts primitive <c>long</c> type to byte array.</summary>
            
             <param name="val">Long value.</param>
             <returns>Array of bytes.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToBytes(System.Single)">
             <summary>
             Converts primitive <c>float</c> type to byte array.</summary>
            
             <param name="val">Float value.</param>
             <returns>Array of bytes.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToBytes(System.Double)">
             <summary>
             Converts primitive <c>double</c> type to byte array.</summary>
            
             <param name="val">Double value.</param>
             <returns>Array of bytes.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.BytesToInt16(System.Byte[],System.Int32)">
             <summary>
             Constructs <c>short</c> from byte array.</summary>
            
             <param name="buf">Array of bytes.</param>
             <param name="off">Offset in <c>bytes</c> array.</param>
             <returns>Short value.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.BytesToInt32(System.Byte[],System.Int32)">
             <summary>
             Constructs <c>int</c> from byte array.</summary>
            
             <param name="buf">Array of bytes.</param>
             <param name="off">Offset in <c>bytes</c> array.</param>
             <returns>Integer value.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.BytesToInt64(System.Byte[],System.Int32)">
             <summary>
             Constructs <c>long</c> from byte array.</summary>
            
             <param name="buf">Array of bytes.</param>
             <param name="off">Offset in <c>bytes</c> array.</param>
             <returns>Long value.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.BytesToSingle(System.Byte[],System.Int32)">
             <summary>
             Constructs <c>float</c> from byte array.</summary>
            
             <param name="buf">Array of bytes.</param>
             <param name="off">Offset in <c>bytes</c> array.</param>
             <returns>Float value.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.BytesToDouble(System.Byte[],System.Int32)">
             <summary>
             Constructs <c>double</c> from byte array.</summary>
            
             <param name="buf">Array of bytes.</param>
             <param name="off">Offset in <c>bytes</c> array.</param>
             <returns>Double value.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.Invert(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Invert part of the bytes array.</summary>
            
             <param name="buf">Bytes buffer to cut an inverted part from.</param>
             <param name="off">Start offset in the source buffer.</param>
             <param name="limit">The number of bytes to cut from the source buffer.</param>
             <returns>Inverted part of the source buffer.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.Invert(System.Byte[])">
             <summary>
             Invert array direction.</summary>
            
             <param name="buf">Bytes array to invert.</param>
             <returns>Inverted bytes array.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ApplyFilter``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
             <summary>
             Applies filter and returns filtered collection of nodes.</summary>
            
             <param name="elements">Nodes to be filtered.</param>
             <param name="filter">Filter to apply</param>
             <returns>Filtered collection.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.All``1">
             <summary>
             All predicate.</summary>
            
             <returns>Always true-result predicate.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.And``1(System.Predicate{``0},System.Predicate{``0})">
             <summary>
             AND predicate. Passes if and only if both provided filters accept the node.
             This filter uses short-term condition evaluation, i.e. second filter would not
             be invoked if first filter returned <c>false</c>.</summary>
            
             <param name="first">First filter to check.</param>
             <param name="second">Second filter to check.</param>
             <returns>Conjunction predicate.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.Filter``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>Filter predicate.</summary> 
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.Contains``1(System.Collections.Generic.ICollection{``0})">
             <summary>
             Creates a predicates that checks if given value is contained in the items collection.</summary>
            
             <param name="items">Collection of valid items.</param>
             <returns>Predicate.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.DoSilent``1(System.Action,System.Action{``0})">
             <summary>
             Do job and hide exception if happens.</summary>
            
             <param name="job">Job to execute.</param>
             <param name="handler">Exception handler.</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.Timestamp(System.Int64)">
             <summary>
             Convert unix timestamp (ms) into the DateTime object.</summary>
            
             <returns>DateTime object representing passed unix timestamp (ms).</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.Sleep(System.TimeSpan)">
             <summary>
             Blocks the current thread for a specified time.</summary>
            
             <param name="delay">Amount of time for which the thread is blocked.</param>
             <returns>true if thread sleep was finished successfully, false if thread sleep was interrupted.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.List``1(``0[])">
             <summary>
             Convert list of arguments into the list.</summary>
            
             <param name="array">Variable arguments collection of items to add into list.</param>
             <returns>List of the passed items.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.Async``1(System.Func{``0})">
             <summary>
             Execute function in background thread.</summary>
            
             <param name="func">Function to execute in background thread.</param>
             <returns>Future to get function result.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.Async(System.Action)">
             <summary>
             Execute action in background thread.</summary>
            
             <param name="action">Action to execute in background thread.</param>
             <returns>Future to get action result.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.AddAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Add all items from the passed collection to this one.</summary>
            
             <param name="collection">This collection to add new items to.</param>
             <param name="newItems">Collection of items to add to this one.</param>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToMap``2(System.Collections.Generic.IDictionary{``0,``1})">
             <summary>
             Extend generic maps with conversions into not-generic ones.</summary>
            
             <param name="source">Generic map to convert into not-generic one.</param>
             <returns>Not-generic map.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToMap``2(System.Collections.IDictionary)">
             <summary>
             Extend base maps with conversions into generic ones.</summary>
            
             <param name="source">Not-generic map to convert into generic one.</param>
             <returns>Generic map.</returns>
        </member>
        <member name="M:GridGain.Client.Util.GridClientUtils.ToNullable``2(System.Collections.Generic.IDictionary{``0,``1})">
             <summary>
             Wrap specified map with null-key allowed dictionary (if required).</summary>
            
             <param name="source">Map to wrap with null-key allowed one.</param>
             <returns>Null-key allowed map.</returns>
        </member>
        <member name="P:GridGain.Client.Util.GridClientUtils.Now">
            <summary>Gets current date and time on this computer, expressed as the local time.</summary> 
        </member>
        <member name="P:GridGain.Client.Util.GridClientUtils.Epoch">
            <summary>Unix epoch start point "1970-01-01 00:00:00.0 UTC" as the local time.</summary> 
        </member>
    </members>
</doc>
